{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u2301 xDrip4iOS (also known as \"xDrip for iOS\" or \"xdripswift\" ) is an open-source application to display real time blood glucose data. It is able to connect as a Master device to various types of Continuous Glucose Monitor systems and display their values on the screen. This is the main way that most people (usually patients with Type 1 Diabetes) will use the app. It is also able to act as a Follower device and pull remote CGM data from Nightscout . This is a great way for parents and care-givers to be able to remotely monitor loved ones and patients. FOR XDRIP+ USERS Please note that xDrip4iOS is not related to the xDrip+ project for Android . For help and information about the xDrip+ project for Android, please see here or look on Facebook . What Do I Need? \u2301 To run xDrip4iOS you will firstly need an iPhone 7 or newer running minimum iOS13. To work as a Master device, you will need to have a compatible CGM system (see below). If you want to share your CGM data with Nightscout, then you will also need a working internet connection. To work as a Follower device, you don't need anything except an internet connection and a working Nightscout site from where to follow the master device. That's it. Nothing else is needed. IMPORTANT Before using xDrip4iOS , it is important to understand several points: This is an open-source, community-based project and is not supported by any company It is not officially approved or regulated for diabetes therapy and/or treatment in any way whatsoever You must understand that you take full responsibility for using this software and you agree to do so at your own risk. Compatible Sensors \u2301 xDrip4iOS is compatible with many Libre sensors and also certain Dexcom sensors/transmitters. Libre \u2301 Libre 1 (European 14 day) Transmitter Type Firmware Version Compatible? MiaoMiao 1, 2, 3 All Yes Bubble, Bubble mini All Yes Atom All Yes GNSentry All Yes Libre 1 (US 14 days) and 2 (European 14 day) Transmitter Type Firmware Version Compatible? Direct Bluetooth (no transmitter) - Yes (2) MiaoMiao 1 >= 39 Yes (1) MiaoMiao 2 >= 7 Yes (1) Miaomiao 3 - Yes (1) Bubble, Bubble mini All Yes Atom All Yes GNSentry - No (1) The MiaoMiao firmware can be upgraded, if needed, using Tomato App (2) Only Libre 2 Europe Libre 2 US/CA/AUS, Libre Pro, Libre H Not compatible Dexcom \u2301 Dexcom G4 (1) / G5 Fully compatible with a bridge/Wixel device and using raw data mode. Dexcom G5 Fully compatible using raw mode. Dexcom G6 and ONE Fully compatible using either raw data or native modes (see below). Older 80xxxx/81xxxx G6 transmitters can work in raw mode with the possibility of processing all data using the xDrip algorithm and manual calibration. Sensor session limits do not apply in this mode. Newer G6 \"Firefly\" transmitters (>8Gxxxx) and ONE will only work in native mode using the algorithm inside the transmitter. This means that xDrip4iOS will be limited to the factory 10 day sensor sessions and is also able to start/stop sensor sessions as well as calibrating. If you need to use the official Dexcom app to upload data to Dexcom Share or Clarity, you can set xDrip4iOS to \"Follow Dexcom App\" mode. In this mode, the main connection between the transmitter and your iPhone is handled by the Dexcom app. xDrip4iOS will simply receive a copy of the transmitted data. This allows you to use xDrip4iOS for all features (alarms, graphs, statistics, Nightscout, Watch app etc) without needing to stop using the official app. Where Can I Get Help? \u2301 The main public support group for all support is the xDrip4iOS group on Facebook . Feel free to join the group, ask questions and participate. You can also find all source code, technical information and register issues in our Github repository . Development History \u2301 This project was started back in 2017 by Johan Degraeve . His idea was to port the original xDrip algorithm to iOS. The original project he created was called xdripiosreader . This was later re-written in 2019 into native swift code and renamed to xdripswift . In 2020, the user interface was overhauled, more features were added and the user-facing project was renamed to xDrip4iOS . How Can I Get Involved? \u2301 You'll find the Github source repository for this documentation here . Please don't hesitate to improve or correct anything you see and create a pull request! You're also welcome to contribute or report any documentation error, unclear explanation, typo, broken link etc by going to Github and opening an issue .","title":"Introduction"},{"location":"#introduction","text":"xDrip4iOS (also known as \"xDrip for iOS\" or \"xdripswift\" ) is an open-source application to display real time blood glucose data. It is able to connect as a Master device to various types of Continuous Glucose Monitor systems and display their values on the screen. This is the main way that most people (usually patients with Type 1 Diabetes) will use the app. It is also able to act as a Follower device and pull remote CGM data from Nightscout . This is a great way for parents and care-givers to be able to remotely monitor loved ones and patients. FOR XDRIP+ USERS Please note that xDrip4iOS is not related to the xDrip+ project for Android . For help and information about the xDrip+ project for Android, please see here or look on Facebook .","title":"Introduction"},{"location":"#what-do-i-need","text":"To run xDrip4iOS you will firstly need an iPhone 7 or newer running minimum iOS13. To work as a Master device, you will need to have a compatible CGM system (see below). If you want to share your CGM data with Nightscout, then you will also need a working internet connection. To work as a Follower device, you don't need anything except an internet connection and a working Nightscout site from where to follow the master device. That's it. Nothing else is needed. IMPORTANT Before using xDrip4iOS , it is important to understand several points: This is an open-source, community-based project and is not supported by any company It is not officially approved or regulated for diabetes therapy and/or treatment in any way whatsoever You must understand that you take full responsibility for using this software and you agree to do so at your own risk.","title":"What Do I Need?"},{"location":"#compatible-sensors","text":"xDrip4iOS is compatible with many Libre sensors and also certain Dexcom sensors/transmitters.","title":"Compatible Sensors"},{"location":"#libre","text":"Libre 1 (European 14 day) Transmitter Type Firmware Version Compatible? MiaoMiao 1, 2, 3 All Yes Bubble, Bubble mini All Yes Atom All Yes GNSentry All Yes Libre 1 (US 14 days) and 2 (European 14 day) Transmitter Type Firmware Version Compatible? Direct Bluetooth (no transmitter) - Yes (2) MiaoMiao 1 >= 39 Yes (1) MiaoMiao 2 >= 7 Yes (1) Miaomiao 3 - Yes (1) Bubble, Bubble mini All Yes Atom All Yes GNSentry - No (1) The MiaoMiao firmware can be upgraded, if needed, using Tomato App (2) Only Libre 2 Europe Libre 2 US/CA/AUS, Libre Pro, Libre H Not compatible","title":"Libre"},{"location":"#dexcom","text":"Dexcom G4 (1) / G5 Fully compatible with a bridge/Wixel device and using raw data mode. Dexcom G5 Fully compatible using raw mode. Dexcom G6 and ONE Fully compatible using either raw data or native modes (see below). Older 80xxxx/81xxxx G6 transmitters can work in raw mode with the possibility of processing all data using the xDrip algorithm and manual calibration. Sensor session limits do not apply in this mode. Newer G6 \"Firefly\" transmitters (>8Gxxxx) and ONE will only work in native mode using the algorithm inside the transmitter. This means that xDrip4iOS will be limited to the factory 10 day sensor sessions and is also able to start/stop sensor sessions as well as calibrating. If you need to use the official Dexcom app to upload data to Dexcom Share or Clarity, you can set xDrip4iOS to \"Follow Dexcom App\" mode. In this mode, the main connection between the transmitter and your iPhone is handled by the Dexcom app. xDrip4iOS will simply receive a copy of the transmitted data. This allows you to use xDrip4iOS for all features (alarms, graphs, statistics, Nightscout, Watch app etc) without needing to stop using the official app.","title":"Dexcom"},{"location":"#where-can-i-get-help","text":"The main public support group for all support is the xDrip4iOS group on Facebook . Feel free to join the group, ask questions and participate. You can also find all source code, technical information and register issues in our Github repository .","title":"Where Can I Get Help?"},{"location":"#development-history","text":"This project was started back in 2017 by Johan Degraeve . His idea was to port the original xDrip algorithm to iOS. The original project he created was called xdripiosreader . This was later re-written in 2019 into native swift code and renamed to xdripswift . In 2020, the user interface was overhauled, more features were added and the user-facing project was renamed to xDrip4iOS .","title":"Development History"},{"location":"#how-can-i-get-involved","text":"You'll find the Github source repository for this documentation here . Please don't hesitate to improve or correct anything you see and create a pull request! You're also welcome to contribute or report any documentation error, unclear explanation, typo, broken link etc by going to Github and opening an issue .","title":"How Can I Get Involved?"},{"location":"faq/","text":"Frequently Asked Questions \u2301 The idea of these FAQs is to try and cover the most common questions that people have when writing in the Facebook group or e-mail us for support. All of the below answers can be found in more detail in the rest of these support pages. We'll try and link to the specific sections where possible. Can I connect using only my Apple Watch? \u2301 No Testflight says that my app will expire in 83 days, what should I do? \u2301 Nothing. We'll always update the Testflight version before it runs out, don't worry. How can I get reports for my Doctor? \u2301 Use Nightscout","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"The idea of these FAQs is to try and cover the most common questions that people have when writing in the Facebook group or e-mail us for support. All of the below answers can be found in more detail in the rest of these support pages. We'll try and link to the specific sections where possible.","title":"Frequently Asked Questions"},{"location":"faq/#can-i-connect-using-only-my-apple-watch","text":"No","title":"Can I connect using only my Apple Watch?"},{"location":"faq/#testflight-says-that-my-app-will-expire-in-83-days-what-should-i-do","text":"Nothing. We'll always update the Testflight version before it runs out, don't worry.","title":"Testflight says that my app will expire in 83 days, what should I do?"},{"location":"faq/#how-can-i-get-reports-for-my-doctor","text":"Use Nightscout","title":"How can I get reports for my Doctor?"},{"location":"advanced/calibration_best_practices/","text":"Calibration Best Practices \u2301 Why is it important to calibrate properly? \u2301 How often should I calibrate? Is it true that my sensor will be more accurate if I calibrate 3 times per day? \u2301 No. You should only calibrate when you need to . Ideally, if there is no change to the sensor reliability, then just one good calibration would last \"forever\". In reality, the sensor filament will slowly degrade whilst inside your body and lose accuracy. The area of tissue around the sensor may get slightly inflamed and your body may start to form scar tissue around the filament insertion path. These effects are generally very small, but can affect the accuracy of the readings taken from the sensor. The filament will likely also move slightly inside your arm (or wherever you have it inserted) and this will again cause slightly different readings. For these reasons, it's normal to have to calibrate maybe every 5-7 days... sometimes more, sometimes less. It should NEVER be necessary to calibrate every 12 hours or even every day. How do I make a good calibration? \u2301 The important thing is to always make a good calibration. That means following (at a minimum) the following rules strictly: Never calibrate against a Freestyle Libre \"scan\". Remember that the Libre is an uncalibrated source and although you could be lucky you should never assume it is accurate (it usually won't be for most people). You should always calibrate against a blood glucose measurement (preferibly using a good quality blood glucose meter such as a Contour Next). Always calibrate when in a normal range (90-140mg/dl for example) Always calibrate when your blood glucose trend is stable . That means that it isn't noticeably rising or falling at all. If you have just eaten that, don't calibrate. If you have administered a bolus treatment over 20 minutes ago, don't calibrate either. You basically want to know that although your current sensor glucose trend is stable, there is nothing affecting what your actual blood glucose trend is doing. Remember that there is a small delay (10-15 minutes) between any blood glucose changes and this change being reflected in your sensor glucose values. Never calibrate outside of a normal range or when your sensor glucose trend is not stable. If you need to calibrate out of range (such as when starting a new sensor), do so and remember not to trust the values until you can calibrate again when back in range and stable Once you've done this and you can verify that the calibration accurately reflects future blood glucose values (again, when in target range and when stable), then you should only calibrate again if you are seeing differences of >10-15mg/dl against blood. if using non-fixed slope calibration, try and make a good calibration at around 80mg/dl and then another at around 150mg/dl. The rest of the rules still apply.","title":"Calibration best practices"},{"location":"advanced/calibration_best_practices/#calibration-best-practices","text":"","title":"Calibration Best Practices"},{"location":"advanced/calibration_best_practices/#why-is-it-important-to-calibrate-properly","text":"","title":"Why is it important to calibrate properly?"},{"location":"advanced/calibration_best_practices/#how-often-should-i-calibrate-is-it-true-that-my-sensor-will-be-more-accurate-if-i-calibrate-3-times-per-day","text":"No. You should only calibrate when you need to . Ideally, if there is no change to the sensor reliability, then just one good calibration would last \"forever\". In reality, the sensor filament will slowly degrade whilst inside your body and lose accuracy. The area of tissue around the sensor may get slightly inflamed and your body may start to form scar tissue around the filament insertion path. These effects are generally very small, but can affect the accuracy of the readings taken from the sensor. The filament will likely also move slightly inside your arm (or wherever you have it inserted) and this will again cause slightly different readings. For these reasons, it's normal to have to calibrate maybe every 5-7 days... sometimes more, sometimes less. It should NEVER be necessary to calibrate every 12 hours or even every day.","title":"How often should I calibrate? Is it true that my sensor will be more accurate if I calibrate 3 times per day?"},{"location":"advanced/calibration_best_practices/#how-do-i-make-a-good-calibration","text":"The important thing is to always make a good calibration. That means following (at a minimum) the following rules strictly: Never calibrate against a Freestyle Libre \"scan\". Remember that the Libre is an uncalibrated source and although you could be lucky you should never assume it is accurate (it usually won't be for most people). You should always calibrate against a blood glucose measurement (preferibly using a good quality blood glucose meter such as a Contour Next). Always calibrate when in a normal range (90-140mg/dl for example) Always calibrate when your blood glucose trend is stable . That means that it isn't noticeably rising or falling at all. If you have just eaten that, don't calibrate. If you have administered a bolus treatment over 20 minutes ago, don't calibrate either. You basically want to know that although your current sensor glucose trend is stable, there is nothing affecting what your actual blood glucose trend is doing. Remember that there is a small delay (10-15 minutes) between any blood glucose changes and this change being reflected in your sensor glucose values. Never calibrate outside of a normal range or when your sensor glucose trend is not stable. If you need to calibrate out of range (such as when starting a new sensor), do so and remember not to trust the values until you can calibrate again when back in range and stable Once you've done this and you can verify that the calibration accurately reflects future blood glucose values (again, when in target range and when stable), then you should only calibrate again if you are seeing differences of >10-15mg/dl against blood. if using non-fixed slope calibration, try and make a good calibration at around 80mg/dl and then another at around 150mg/dl. The rest of the rules still apply.","title":"How do I make a good calibration?"},{"location":"advanced/freeaps/","text":"FreeAPS (Loop) Integration \u2301 xDrip4iOS can be used as an offline CGM data source for the FreeAPS fork of Loop What is FreeAPS (Loop)? \u2301 Loop is an Artificial Pancreas System (APS) written for the iPhone. An APS works by reading blood glucose values, predicting/calculating the insulin requirement and automatically adjusting a user's insulin pump with the aim of keeping the user within their target blood glucose range. FreeAPS is a fork of the Loop project. This fork was originally developed by Ivan Valkou . His repository was frozen last spring. To support the users of the FreeAPS fork, maintenance has been taken over by the Loop and Learn mentors. FreeAPS vs FreeAPS X?? This could get confusing, so pay attention: Ivan's original FreeAPS project is based on Loop and is what we are discussing on this page Ivan's newer FreeAPS X project is based on OpenAPS . It is a different system and is discussed here The main difference between Loop and FreeAPS is that FreeAPS has a different methodology than Loop (v2.2.6 or later) for delivering extra insulin via micro-boluses and adjusting basal rates. FreeAPS is more customizable and flexible. For FreeAPS, v2.2 (202) or later, support is included for xDrip4iOS built off the work of and in the collaboration with Aleksandar Obucina and based upon an xdrip client from Julien Groen. Whereas Loop will only work with compatible Dexcom or Medtronic pump-connected sensors, FreeAPS also contains a Nightscout client which can be used to pull glucose data from the user's Nightscout site (this requires internet access via WiFi or cell coverage), or via apps (such as Spike) that have an internal http server that mimics a Nightscout server. Using on-the-local-phone CGM access using Dexcom or xDrip4iOS (Dexcom G4/5/6 + Libre with some limitations ) does not require internet access and is thus a preferred method for looping. Important: The Testflight version of xDrip4iOS cannot be used with FreeAPS. You must build xDrip4iOS from source. How do I install FreeAPS (Loop)? \u2301 The Loop and Learn repository is here . With the advent of iOS 15 (Xcode 13), all Loop and FreeAPS builds require using LoopWorkspace. LoopDocs has been modifed for workspace builds. If you follow the directions for LoopDocs: Build Loop App , when you get to the instruction where you choose what Loop to build, select FreeAPS instead of Loop Master. Please read the LoopDocs: Updating page to ensure your Mac is fully updated (both MacOS and Xcode) and Xcode Command Line tools/Git are installed before proceeding. Follow all instructions in LoopDocs for building the Loop app - the only difference is you to select FreeAPS instead of Loop when running the script in the terminal. Remember that xDrip4iOS is a separate app and must be built from source in order to successfully interface with FreeAPS. Sign the Targets \u2301 As per a normal Loop build, you will need to sign the four targets using your Development Team. Signing will automatically set the Bundle Identifier for your app. You can change this, but be aware that it will then install a completely new FreeAPS app. It's better to just leave it as is. App Group \u2301 Please do not modify the App Groups at all. This is important to ensure integration with xDrip4iOS. How do I install xDrip4iOS? \u2301 You need to follow the Build From Source instructions. The common LoopKit app group is already written into the standard project file in xDrip4iOS so no need to touch anything. Operation \u2301 The operation of both FreeAPS (Loop) and xDrip4iOS is the same. The only thing needed is to add a CGM in FreeAPS and chose \"xDrip4iOS\". This will tell FreeAPS to look for glucose data in the shared app group via Julien's xdrip client.","title":"FreeAPS (Loop) Integration"},{"location":"advanced/freeaps/#freeaps-loop-integration","text":"xDrip4iOS can be used as an offline CGM data source for the FreeAPS fork of Loop","title":"FreeAPS (Loop) Integration"},{"location":"advanced/freeaps/#what-is-freeaps-loop","text":"Loop is an Artificial Pancreas System (APS) written for the iPhone. An APS works by reading blood glucose values, predicting/calculating the insulin requirement and automatically adjusting a user's insulin pump with the aim of keeping the user within their target blood glucose range. FreeAPS is a fork of the Loop project. This fork was originally developed by Ivan Valkou . His repository was frozen last spring. To support the users of the FreeAPS fork, maintenance has been taken over by the Loop and Learn mentors. FreeAPS vs FreeAPS X?? This could get confusing, so pay attention: Ivan's original FreeAPS project is based on Loop and is what we are discussing on this page Ivan's newer FreeAPS X project is based on OpenAPS . It is a different system and is discussed here The main difference between Loop and FreeAPS is that FreeAPS has a different methodology than Loop (v2.2.6 or later) for delivering extra insulin via micro-boluses and adjusting basal rates. FreeAPS is more customizable and flexible. For FreeAPS, v2.2 (202) or later, support is included for xDrip4iOS built off the work of and in the collaboration with Aleksandar Obucina and based upon an xdrip client from Julien Groen. Whereas Loop will only work with compatible Dexcom or Medtronic pump-connected sensors, FreeAPS also contains a Nightscout client which can be used to pull glucose data from the user's Nightscout site (this requires internet access via WiFi or cell coverage), or via apps (such as Spike) that have an internal http server that mimics a Nightscout server. Using on-the-local-phone CGM access using Dexcom or xDrip4iOS (Dexcom G4/5/6 + Libre with some limitations ) does not require internet access and is thus a preferred method for looping. Important: The Testflight version of xDrip4iOS cannot be used with FreeAPS. You must build xDrip4iOS from source.","title":"What is FreeAPS (Loop)?"},{"location":"advanced/freeaps/#how-do-i-install-freeaps-loop","text":"The Loop and Learn repository is here . With the advent of iOS 15 (Xcode 13), all Loop and FreeAPS builds require using LoopWorkspace. LoopDocs has been modifed for workspace builds. If you follow the directions for LoopDocs: Build Loop App , when you get to the instruction where you choose what Loop to build, select FreeAPS instead of Loop Master. Please read the LoopDocs: Updating page to ensure your Mac is fully updated (both MacOS and Xcode) and Xcode Command Line tools/Git are installed before proceeding. Follow all instructions in LoopDocs for building the Loop app - the only difference is you to select FreeAPS instead of Loop when running the script in the terminal. Remember that xDrip4iOS is a separate app and must be built from source in order to successfully interface with FreeAPS.","title":"How do I install FreeAPS (Loop)?"},{"location":"advanced/freeaps/#sign-the-targets","text":"As per a normal Loop build, you will need to sign the four targets using your Development Team. Signing will automatically set the Bundle Identifier for your app. You can change this, but be aware that it will then install a completely new FreeAPS app. It's better to just leave it as is.","title":"Sign the Targets"},{"location":"advanced/freeaps/#app-group","text":"Please do not modify the App Groups at all. This is important to ensure integration with xDrip4iOS.","title":"App Group"},{"location":"advanced/freeaps/#how-do-i-install-xdrip4ios","text":"You need to follow the Build From Source instructions. The common LoopKit app group is already written into the standard project file in xDrip4iOS so no need to touch anything.","title":"How do I install xDrip4iOS?"},{"location":"advanced/freeaps/#operation","text":"The operation of both FreeAPS (Loop) and xDrip4iOS is the same. The only thing needed is to add a CGM in FreeAPS and chose \"xDrip4iOS\". This will tell FreeAPS to look for glucose data in the shared app group via Julien's xdrip client.","title":"Operation"},{"location":"advanced/freeapsx/","text":"FreeAPS X (OpenAPS) Integration \u2301 xDrip4iOS can be used as an offline CGM data source for FreeAPS X. (NOTE - this is NOT Loop or FreeAPS, which is a fork of Loop.) What is FreeAPS X? \u2301 FreeAPS X is an implementation of the OpenAPS algorithm on iPhone. Please read the FreeAPS X Documentation page which includes links to the discussion and news groups in Telegram. How do I install FreeAPS X? \u2301 FreeAPS X Installation Instuctions should only be followed after you have reviewed all the documentaion linked above. How do I install xDrip4iOS? \u2301 You need to follow the Build From Source instructions but with a few small differences as explained below: NOTE - this section needs to be updated","title":"FreeAPS X (OpenAPS) Integration"},{"location":"advanced/freeapsx/#freeaps-x-openaps-integration","text":"xDrip4iOS can be used as an offline CGM data source for FreeAPS X. (NOTE - this is NOT Loop or FreeAPS, which is a fork of Loop.)","title":"FreeAPS X (OpenAPS) Integration"},{"location":"advanced/freeapsx/#what-is-freeaps-x","text":"FreeAPS X is an implementation of the OpenAPS algorithm on iPhone. Please read the FreeAPS X Documentation page which includes links to the discussion and news groups in Telegram.","title":"What is FreeAPS X?"},{"location":"advanced/freeapsx/#how-do-i-install-freeaps-x","text":"FreeAPS X Installation Instuctions should only be followed after you have reviewed all the documentaion linked above.","title":"How do I install FreeAPS X?"},{"location":"advanced/freeapsx/#how-do-i-install-xdrip4ios","text":"You need to follow the Build From Source instructions but with a few small differences as explained below: NOTE - this section needs to be updated","title":"How do I install xDrip4iOS?"},{"location":"configure/","text":"General Settings \u2301 In a previous section , you should have initially configured xDrip4iOS to use mg/dl or mmol/l and to act as a Master or Follower device. Now we can start to configure the app to work as we want. When you first install xDrip4iOS, we will put some default values that should work fine for most users to start using the app with. Help \u2301 Open Online Help will drive you directly to this documentation. If you enabled Translate Automatically, you will see a Google automatic translation version of the documentation. Show Help Icon will add a shortcut icon to the Home view: Show Notifications \u2301 You can enable xDrip4iOS to show a notification on your phone. This will appear as per the Notification settings for xDrip4iOS in your iPhone settings. You can enable banner notifications and chose if it will show on the lock-screen or not. You can leave the interval at which the notification will appear or leave it at default 0: whenever new BG value is available to xDrip4iOS. You can also enable the App Badge which will should your current BG value on the app icon. Decimals When using mmol/l the App Badge will display decimals only if Show BG in Notifications is enabled. If you disable Notifications you can use multiply by 10 to show the full value (you'll need to mentally add the decimal point. 94 means 9.4 mmol/l). Home View \u2301 You can disable automatic rotation of the graph when you rotate your phone. Show clock when Locked adds a large clock view on the Home screen when locked. Objective Values \u2301 We think of objective values as our working limits. We define theses limits as being: in range out of range out of range (urgent) . In Range \u2301 Firstly we need to set a range where we want our glucose to be most of the time. This is set using Low Value and High Value . Whilst our blood glucose value is between these limits, we will see the glucose points and values in green . Out of Range \u2301 When our glucose values are below our Low value or above our High value, but still not anything to be worried about, then we will see them in yellow . We might use this as a sign that we should think about taking some kind of action (eat something or take insulin) before the values become \"urgent\". Out of Range (Urgent) \u2301 When our glucose values are above or below our \"Urgent\" values, then we consider them to need urgent attention and we will see them in red . We set these limits using the Urgent Low Value and Urgent High Value We should take evaluate the situation and decide if we must take action (eat glucose or take insulin). Graph Options \u2301 xDrip4iOS allows us to show the main graph in two ways: Dynamic y axis \u2301 This option (used by default) will use our objective values (see above) to define the values shown on the vertical axis. It will also show guidelines across the graph so that we can easily see how close we are to each limit. The graph will automatically scale if our blood glucose value is above our Urgent High value. Standard Grid \u2301 By deselecting the dynamic graph option, xDrip4iOS will just show a default grid system. Again, the graph will scale as needed. Treatments \u2301 You can log treatments in xDrip+, or receive them from Nightscout. If treatments are present you can display them on the Home chart. Micro-bolus (typically generated by DIY AAPS systems) can be displayed without the amount of insulin (select the threshold below which it's not displayed) and visualized in the treatments list. Statistics \u2301 xDrip4iOS calculates basic statistics, you can display them on the Home screen. If you don't wish to use your objectives range you can leave the standard range. Sensor countdown \u2301 You can enable the display of your sensor actual lifetime, used or remaining days (alternative graphics).","title":"Settings"},{"location":"configure/#general-settings","text":"In a previous section , you should have initially configured xDrip4iOS to use mg/dl or mmol/l and to act as a Master or Follower device. Now we can start to configure the app to work as we want. When you first install xDrip4iOS, we will put some default values that should work fine for most users to start using the app with.","title":"General Settings"},{"location":"configure/#help","text":"Open Online Help will drive you directly to this documentation. If you enabled Translate Automatically, you will see a Google automatic translation version of the documentation. Show Help Icon will add a shortcut icon to the Home view:","title":"Help"},{"location":"configure/#show-notifications","text":"You can enable xDrip4iOS to show a notification on your phone. This will appear as per the Notification settings for xDrip4iOS in your iPhone settings. You can enable banner notifications and chose if it will show on the lock-screen or not. You can leave the interval at which the notification will appear or leave it at default 0: whenever new BG value is available to xDrip4iOS. You can also enable the App Badge which will should your current BG value on the app icon. Decimals When using mmol/l the App Badge will display decimals only if Show BG in Notifications is enabled. If you disable Notifications you can use multiply by 10 to show the full value (you'll need to mentally add the decimal point. 94 means 9.4 mmol/l).","title":"Show Notifications"},{"location":"configure/#home-view","text":"You can disable automatic rotation of the graph when you rotate your phone. Show clock when Locked adds a large clock view on the Home screen when locked.","title":"Home View"},{"location":"configure/#objective-values","text":"We think of objective values as our working limits. We define theses limits as being: in range out of range out of range (urgent) .","title":"Objective Values"},{"location":"configure/#in-range","text":"Firstly we need to set a range where we want our glucose to be most of the time. This is set using Low Value and High Value . Whilst our blood glucose value is between these limits, we will see the glucose points and values in green .","title":"In Range"},{"location":"configure/#out-of-range","text":"When our glucose values are below our Low value or above our High value, but still not anything to be worried about, then we will see them in yellow . We might use this as a sign that we should think about taking some kind of action (eat something or take insulin) before the values become \"urgent\".","title":"Out of Range"},{"location":"configure/#out-of-range-urgent","text":"When our glucose values are above or below our \"Urgent\" values, then we consider them to need urgent attention and we will see them in red . We set these limits using the Urgent Low Value and Urgent High Value We should take evaluate the situation and decide if we must take action (eat glucose or take insulin).","title":"Out of Range (Urgent)"},{"location":"configure/#graph-options","text":"xDrip4iOS allows us to show the main graph in two ways:","title":"Graph Options"},{"location":"configure/#dynamic-y-axis","text":"This option (used by default) will use our objective values (see above) to define the values shown on the vertical axis. It will also show guidelines across the graph so that we can easily see how close we are to each limit. The graph will automatically scale if our blood glucose value is above our Urgent High value.","title":"Dynamic y axis"},{"location":"configure/#standard-grid","text":"By deselecting the dynamic graph option, xDrip4iOS will just show a default grid system. Again, the graph will scale as needed.","title":"Standard Grid"},{"location":"configure/#treatments","text":"You can log treatments in xDrip+, or receive them from Nightscout. If treatments are present you can display them on the Home chart. Micro-bolus (typically generated by DIY AAPS systems) can be displayed without the amount of insulin (select the threshold below which it's not displayed) and visualized in the treatments list.","title":"Treatments"},{"location":"configure/#statistics","text":"xDrip4iOS calculates basic statistics, you can display them on the Home screen. If you don't wish to use your objectives range you can leave the standard range.","title":"Statistics"},{"location":"configure/#sensor-countdown","text":"You can enable the display of your sensor actual lifetime, used or remaining days (alternative graphics).","title":"Sensor countdown"},{"location":"configure/alarms/","text":"Setting Alarms \u2301 xDrip4iOS, the same as all other CGM apps, is able to alert you to certain events by sounding an alarm on your iPhone. Alarms can be configured to happen for different reasons, such as: your blood glucose is getting too low your blood glucose is dropping very quickly your blood glucose is getting high you need to put in your initial calibration you have stopped getting readings from your sensor We can also use alarms to function as reminders to remind us to: calibrate our sensor every x days stop and buy bread on the way home from work not really, but we're glad you're reading everything There are two steps to configure an alarm in xDrip4iOS. We define the Alarm Types . These are different types of alarms that we can use to alert us to different types of events. We define the Alarms themselves. These trigger different types of alarm based upon certain events that happen or conditions that we decide. Before we continue... Let's just quickly get the concept clear. Take a deep breath and repeat after me... An Alarm Type can be used for many different Alarms . Any Alarm can only use one Alarm Type at a time. Alarm Types \u2301 Here we will define the different types of alarm that we will hear. If you go into Alarm Types, you will see that we there is a default Alarm Type set. We called it \"Default\"... because we're original and clever. You can modify this, or you can create your own Alarm Type. Suggestion You might find it easier to leave the default alarm disabled and create your own alarm type. Then you will use your custom alarm type only for the alarms you want to use. If you want to add a new/custom Alarm Type, click the + button top right and configure it. We can set the following parameters for an Alarm Type: Option Description Enabled If enabled, any alarm assigned with this alarm type will alert us. If not enabled, the assigned alarm will not trigger Name Enter a name here such as \"Loud\", \"Urgent\" or \"Quiet\". The name can be anything you chose Vibrate If enabled, the alarm will vibrate the phone Sound Choose the sound that you want to play when the alarm is triggered Override Mute If enabled, the alarm will sound even if the phone is in \"Silent Mode\" ( except for Missed Readings ) Snooze Via Notification If enabled, any notification will contain the option to \"snooze\" the alarm during x minutes Default Snooze Time Once an alarm is snoozed, how many minutes should it wait before alarming again? Once you've finished editing your Alarm Type, make sure you hit Done in the top-right corner. If you don't, you'll lose your changes. Eventually, you will have different alarm types, matching your needs in terms of sounds and vibrations. Having several types will help you selectively disable some of them if necessary. Alarms \u2301 Now that we have an Alarm Type configured, we can configure the individual Alarms. An alarm will be triggered when the something meets a defined condition. For example you could define an alarm to be triggered: \"Sound an Low Alarm whenever my blood glucose drops below 60mg/dl \" \"Sound a High Alarm if my blood glucose goes over 250mg/dl \" \"Sound a Low Alarm When my blood glucose drops below 80mg/dl during the night\" \"Sound an alarm if xDrip4iOS has been Missing Readings from my sensor in the last 30 minutes \" \"Sound an alarm 72 hours after I last calibrated my sensor to remind me to calibrate again\" In the above examples, you will see two things. The Alarms that are available and the conditions that we can set for them to be triggered. Level alarms will trigger above (high) or below (low) a certain blood glucose level. Rise and drop alarms will trigger if blood glucose change over the last 2 readings (or 4 minutes for Libre 2 direct) is larger than the level you've setup. Missed readings will trigger after the defined time without receiving any blood glucose data. Calibrations needed alarm will trigger after the defined amount of hours since last calibration was entered in xDrip4iOS. Battery alarm will trigger when the battery falls below the defined percentage. Each alarm will use one of the alarm types you created, select the one you'd like to be used for this alarm event: You can also change the alarm type and threshold for certain moments of the day, for this you need to add alarms like in this example: Say you'd like to have your Low Alarm to trigger only at night time (22:00 to 7:00). Select your low alarm and add an alarm with the + icon top right. On the new Low Alarm, change Apply from to 7:00 and Ok. Set the Alarm Type and Done. You now have two different Low Alarms: Loud from 00:00 to 7:00 and quiet from 7:00 to 00:00. Now select the second alarm (starting at 7:00) and repeat the sequence with a new alarm starting at 22:00, alarm type Loud. Save. You now have the Low Alarm trigger with the alarm type Loud from 22:00 to 7:00 and the rest of the day with Quiet. You could also have modified the threshold value for different moments of the day. Volume Tests \u2301 They alarm will sound with the volume that your iPhone is set to. This could mean that you have the volume turned right down and would then not hear anything. In order to be able to quickly test what volume your alarms will sound at (before going to bed for example), you can click the Volume Test buttons. A sample Alarm sound will play and you can adjust the volume as required using the volume keys on the side of your iPhone. Then just click OK to stop the alarm. If you have alarms that use the Override Mute function, then when silent mode is activated (the small switch above the volume keys), there will be a different volume level used. To test/set this level, click the Volume Test (Override Mute) button, set the level and click OK.","title":"Alarms"},{"location":"configure/alarms/#setting-alarms","text":"xDrip4iOS, the same as all other CGM apps, is able to alert you to certain events by sounding an alarm on your iPhone. Alarms can be configured to happen for different reasons, such as: your blood glucose is getting too low your blood glucose is dropping very quickly your blood glucose is getting high you need to put in your initial calibration you have stopped getting readings from your sensor We can also use alarms to function as reminders to remind us to: calibrate our sensor every x days stop and buy bread on the way home from work not really, but we're glad you're reading everything There are two steps to configure an alarm in xDrip4iOS. We define the Alarm Types . These are different types of alarms that we can use to alert us to different types of events. We define the Alarms themselves. These trigger different types of alarm based upon certain events that happen or conditions that we decide. Before we continue... Let's just quickly get the concept clear. Take a deep breath and repeat after me... An Alarm Type can be used for many different Alarms . Any Alarm can only use one Alarm Type at a time.","title":"Setting Alarms"},{"location":"configure/alarms/#alarm-types","text":"Here we will define the different types of alarm that we will hear. If you go into Alarm Types, you will see that we there is a default Alarm Type set. We called it \"Default\"... because we're original and clever. You can modify this, or you can create your own Alarm Type. Suggestion You might find it easier to leave the default alarm disabled and create your own alarm type. Then you will use your custom alarm type only for the alarms you want to use. If you want to add a new/custom Alarm Type, click the + button top right and configure it. We can set the following parameters for an Alarm Type: Option Description Enabled If enabled, any alarm assigned with this alarm type will alert us. If not enabled, the assigned alarm will not trigger Name Enter a name here such as \"Loud\", \"Urgent\" or \"Quiet\". The name can be anything you chose Vibrate If enabled, the alarm will vibrate the phone Sound Choose the sound that you want to play when the alarm is triggered Override Mute If enabled, the alarm will sound even if the phone is in \"Silent Mode\" ( except for Missed Readings ) Snooze Via Notification If enabled, any notification will contain the option to \"snooze\" the alarm during x minutes Default Snooze Time Once an alarm is snoozed, how many minutes should it wait before alarming again? Once you've finished editing your Alarm Type, make sure you hit Done in the top-right corner. If you don't, you'll lose your changes. Eventually, you will have different alarm types, matching your needs in terms of sounds and vibrations. Having several types will help you selectively disable some of them if necessary.","title":"Alarm Types"},{"location":"configure/alarms/#alarms","text":"Now that we have an Alarm Type configured, we can configure the individual Alarms. An alarm will be triggered when the something meets a defined condition. For example you could define an alarm to be triggered: \"Sound an Low Alarm whenever my blood glucose drops below 60mg/dl \" \"Sound a High Alarm if my blood glucose goes over 250mg/dl \" \"Sound a Low Alarm When my blood glucose drops below 80mg/dl during the night\" \"Sound an alarm if xDrip4iOS has been Missing Readings from my sensor in the last 30 minutes \" \"Sound an alarm 72 hours after I last calibrated my sensor to remind me to calibrate again\" In the above examples, you will see two things. The Alarms that are available and the conditions that we can set for them to be triggered. Level alarms will trigger above (high) or below (low) a certain blood glucose level. Rise and drop alarms will trigger if blood glucose change over the last 2 readings (or 4 minutes for Libre 2 direct) is larger than the level you've setup. Missed readings will trigger after the defined time without receiving any blood glucose data. Calibrations needed alarm will trigger after the defined amount of hours since last calibration was entered in xDrip4iOS. Battery alarm will trigger when the battery falls below the defined percentage. Each alarm will use one of the alarm types you created, select the one you'd like to be used for this alarm event: You can also change the alarm type and threshold for certain moments of the day, for this you need to add alarms like in this example: Say you'd like to have your Low Alarm to trigger only at night time (22:00 to 7:00). Select your low alarm and add an alarm with the + icon top right. On the new Low Alarm, change Apply from to 7:00 and Ok. Set the Alarm Type and Done. You now have two different Low Alarms: Loud from 00:00 to 7:00 and quiet from 7:00 to 00:00. Now select the second alarm (starting at 7:00) and repeat the sequence with a new alarm starting at 22:00, alarm type Loud. Save. You now have the Low Alarm trigger with the alarm type Loud from 22:00 to 7:00 and the rest of the day with Quiet. You could also have modified the threshold value for different moments of the day.","title":"Alarms"},{"location":"configure/alarms/#volume-tests","text":"They alarm will sound with the volume that your iPhone is set to. This could mean that you have the volume turned right down and would then not hear anything. In order to be able to quickly test what volume your alarms will sound at (before going to bed for example), you can click the Volume Test buttons. A sample Alarm sound will play and you can adjust the volume as required using the volume keys on the side of your iPhone. Then just click OK to stop the alarm. If you have alarms that use the Override Mute function, then when silent mode is activated (the small switch above the volume keys), there will be a different volume level used. To test/set this level, click the Volume Test (Override Mute) button, set the level and click OK.","title":"Volume Tests"},{"location":"configure/algorithm/","text":"Calibration of xDrip4iOS \u2301 What is an Algorithm? \u2301 Placeholder xDrip Algorithm \u2301 Placeholder Libre Algorithm \u2301 Placeholder","title":"Calibration of xDrip4iOS"},{"location":"configure/algorithm/#calibration-of-xdrip4ios","text":"","title":"Calibration of xDrip4iOS"},{"location":"configure/algorithm/#what-is-an-algorithm","text":"Placeholder","title":"What is an Algorithm?"},{"location":"configure/algorithm/#xdrip-algorithm","text":"Placeholder","title":"xDrip Algorithm"},{"location":"configure/algorithm/#libre-algorithm","text":"Placeholder","title":"Libre Algorithm"},{"location":"configure/applewatch/","text":"Connecting to an Apple Watch \u2301 Calendar method \u2301 Into your iPhone calendar create a new calendar and call it xDrip. In xDrip4iOS settings create an event in calendar to allow sync\u2019ing with your Apple Watch. Authorize xDrip. Select the xDrip calendar. You can then customize the indications. Complication method \u2301 Prerequisite: xDrip4iOS must be installed on your Watch. This should be automatically done when you install xDrip4iOS on your phone. If it doesn't: Go to the Apple Watch app on your phone In the \u201cMy Watch\u201d tab to scroll all the way down to the \u201cAvailable apps\u201d section Tap \u201cInstall\u201d next to xDrip4iOS To add xDrip4iOS as a complication on a compatible watch face: Long press the watch face Tap \u201cmodify\u201d Select the complication slot where you want to have it and scroll with the digital crown until xDrip4iOS is selected Press the crown to exit back to watchface Alternatively, this can be done from the Watch app on the iPhone. Adding it to the dock, depends on the mode. If you have the Dock set to \u201cmost recent\u201d then it simply depends on when you last opened xDrip4iOS whether it will appear or not. If you want it there permanently and in front, you must set it to \u201cFavourites\u201d mode. And \u201cfavourites\u201d are managed from the Apple Watch app on the iPhone, you can add xDrip4iOS as a favorite there to have it in dock permanently.","title":"Apple Watch"},{"location":"configure/applewatch/#connecting-to-an-apple-watch","text":"","title":"Connecting to an Apple Watch"},{"location":"configure/applewatch/#calendar-method","text":"Into your iPhone calendar create a new calendar and call it xDrip. In xDrip4iOS settings create an event in calendar to allow sync\u2019ing with your Apple Watch. Authorize xDrip. Select the xDrip calendar. You can then customize the indications.","title":"Calendar method"},{"location":"configure/applewatch/#complication-method","text":"Prerequisite: xDrip4iOS must be installed on your Watch. This should be automatically done when you install xDrip4iOS on your phone. If it doesn't: Go to the Apple Watch app on your phone In the \u201cMy Watch\u201d tab to scroll all the way down to the \u201cAvailable apps\u201d section Tap \u201cInstall\u201d next to xDrip4iOS To add xDrip4iOS as a complication on a compatible watch face: Long press the watch face Tap \u201cmodify\u201d Select the complication slot where you want to have it and scroll with the digital crown until xDrip4iOS is selected Press the crown to exit back to watchface Alternatively, this can be done from the Watch app on the iPhone. Adding it to the dock, depends on the mode. If you have the Dock set to \u201cmost recent\u201d then it simply depends on when you last opened xDrip4iOS whether it will appear or not. If you want it there permanently and in front, you must set it to \u201cFavourites\u201d mode. And \u201cfavourites\u201d are managed from the Apple Watch app on the iPhone, you can add xDrip4iOS as a favorite there to have it in dock permanently.","title":"Complication method"},{"location":"configure/calibrate/","text":"Calibration of xDrip4iOS \u2301 Disclaimer No matter which calibration method you decide to use and/or how good you are in calibrating, there are many reasons and factors why xDrip4iOS can show values that differ greatly from your actual blood glucose. Due to this, use careful consideration if you are about to apply a correction bolus because the app says that you have a high blood glucose OR before you decide to take in some fast carbs, because the app is saying you have a hypo, but you don't feel like it at all. It is always recommended to take a proper finger prick test if you have any doubts about the accuracy of the reading shown in the app. Please note The most of the example blood glucose values in this instruction text is in unit of mmol/l. You can transform these values to mg/dl by multiplying the mmol/l figure by 18 (i.e. 1 mmol/l = 18 mg/dl). What does \"Calibration\" mean? \u2301 Calibration is a functionality in many CGM apps with which user can make the calculations that use the sensor glucose (SG) readings sent by the sensor become much more accurate and closer to real blood glucose (BG). Why do we need to calibrate? \u2301 SG readings sent by your sensor are so called \"raw\" values and the accuracy of these raw values depend on many things. Typical variables that have an impact are the time of how long the sensor has been attached to your skin; sensors are typically less accurate \"right out of the box\" and also 1-3 days before they expire. This is a natural behaviour of sensors and is completely normal. You might have also inserted the sensor into an area on your skin where it's harder for the sensor to get accurate readings. Also even sensors themselves vary; sometimes you get an accurate one which behaves nicely the whole time it is inserted and throughout the BG range, the other time the sensor can be all over the place and might even stop working before the official usage period ends. All this means that if you find that you are not happy with the (non-calibrated) accuracy of your current sensor, the calibration methods provided by xDrip4iOS help you to mitigate the above mentioned variables to make the BG readings in the app much more accurate. Important No calibration can accurate readings provided by a faulty/noisy sensor. If the sensor is providing erratic and highly fluctuating SG values, it is impossible for any application to correct these and show accurate readings to the user. For this reason it might be difficult to calibrate, when a sensor is new and the readings have not yet steadied out. Algorithms and calibration methods \u2301 G6 and ONE G6 and ONE do not use the xDrip4iOS calibration algorithms but send the calibration request directly to the transmitter the same way the Dexcom app would do. You cannot use xDrip algorithm with these sensors. xDrip4iOS application offers three different ways how the app interprets the raw SG values provided by the sensor. Each xDrip4iOS user needs to consider that what is the best method for themselves to use. Libre Transmitter algorithm (basic) xDrip algorithm with single-point calibration (recommended) xDrip algorithm with multi-point calibration (advanced use) Transmitter algorithm \u2301 Choose this method if you have just started to use xDrip4iOS and/or you are not (yet) familiar enough with the concept of calibration that you would like to try it out and/or you just want a simple setup and you are ok with the inaccuracies that come from this method. Transmitter algorithm is not an actual calibration method at all, but more of a default setting in the app for those users, who don't want to spend time on thinking when or how to calibrate. For this method the app has a specific built-in algorithm that applies a correction to the BG reading provided by the sensor and then the corrected BG reading is shown to the user. The user is not able to impact to the correction which is done by the algorithm. Please note when using Transmitter algorithm! There will most likely be small differences between the readings shown by the LibreLink app and readings shown by xDrip4iOS. Please expect that due to the lack of calibration there could be relatively large differences between the reading shown in xDrip4iOS and your actual blood glucose reading. xDrip algorithm with single-point calibration \u2301 Choose this method, when you want to get more accurate readings from the app and you are ready to apply a calibration, but you don't necessarily want to calibrate that often. Single-point calibration is a way of calibration where you make only one calibration based on which the app then applies a fixed positive or negative correction for the raw values that the sensor is sending. Single-point calibration applies correction only via intercept of the calibration curve (please read below \"Advanced Calibration Explanations\"). xDrip algorithm with multi-point calibration \u2301 If you want the most accurate readings from the app and you are ready to pay more attention and to use more time on calibration. Multi-point calibration allows a way of calibration in which the user can enter different calibration values in different areas of the BG range which are then all taken into account when the app calculates the calibration curve. This means that the calibration curve can take into account the differences in the sensor raw value accuracy at low-end of BG range and in the high-end of BG range. The first calibration adjusts only the intercept of the calibration curve (please read below \"Advanced Calibration Explanations\") but the following calibrations after this adjust both the slope and the intercept. If done correctly, this calibration method can provide very accurate readings in the app, but if done wrongly also the magnitude of error can be much larger. In theory the more calibrations are added the more accurate the calibration becomes. However, in practice even just two good calibrations (one on the low-end of BG range and the other on the high-end) can make the calibration very accurate. This means that e.g. regular twice-a-day calibrations are not needed and they actually increase the possibility that the user eventually applies a faulty calibration, which makes the whole calibration go bad. Advanced Calibration Explanations \u2301 As described above, calibration is a way to reduce the inaccuracies that are coming from the sensor that you use. This section explains in more detail how Xdrip4iOS transforms the raw SG readings into calibrated BG readings that are then shown to the user in the main screen of the app. In practise the calibration is stored as a calibration curve in the app. This curve is used to apply a correction to the value provided by the sensor. This graph is not visible in the app, but can be described as a combination of slope and intercept - it makes it easier to understand these concepts, if you remember the lessons about 1st degree equations from the time you were in school :) Slope \u2301 The Slope describes the steepness/angle of the calibration curve. Slope (in the context of calibration) can be only positive and is typically something between 0,7-1,3. Slope is a multiplier that is applied to the raw value of the sensor throughout the BG range. If there is no calibration, slope gets a value of 1,0. Intercept \u2301 The Intercept describes a fixed correction that is added (when positive) or deducted (when negative) from the raw value. Typical values for intercept are between -2,0.... +2,0 (in mmol/l). If there is no calibration, intercept gets a value of 0. Example #1 Slope = 1,0 / Intercept = 0,0 Result = No calibration. Raw value from sensor is shown as-is in the app: if sensor gives 5,0 mmol/l reading, the app shows 5,0 mmol/l reading. Example #2 Slope = 1,0 / Intercept = 0,3 Typical example of single-point calibration, where the calibration applies a small, fixed correction over the whole BG range. Remember that intercept can also be negative. In practice 0,3 mmol/l is added (deducted, if negative intercept) to any sensor raw value: if sensor gives a raw value of 5,0 mmol/l, the app shows 5,3 mmol/l, if the sensor gives a raw value of 9,3 mmol/l, the app shows 9,6 mmol/l. Example #13 Slope = 1,2 / Intercept = 0,0 Example of a calibration, where only the slope of the calibration is adjusted. In practice this type of a calibration means that throughout the BG range, a multiplier of 1,2 is applied to the raw value: if sensor gives a raw value of 5,0 mmol/l, the app shows 6.0 mmol/l (5,0 x 1,2), if the sensor gives a raw value of 9,3 mmol/l, the app shows 11,2 mmol/l (9,3 x 1,2). Example #4 Slope = 1,2 / Intercept = 0,3 Typical example of multi-point calibration after the 2nd (or further) calibration has been done. This applies both the fixed correction as per the intercept and also a multiplier as per the slope value: if sensor gives a raw value of 5,0 mmol/l, the app shows 6,3 mmol/l (5,0 x 1,2 + 0,3), if the sensor gives a raw value of 9,3 mmol/l, the app shows 11,5 mmol/l (9,3 x 1,2 + 0,3). Calibration Best Practices \u2301 Calibrate only when your BG is steady. While a finger prick gives you an accurate BG reading straight from your blood at that time, a sensor attached to your skin measures and estimates BG readings from interstitial fluid under your skin. When your actual BG fluctuates, these changes appear in interstitial fluid only after a delay. This delay can be anything between 5-20 mins. This means that your BG must have been steady when you take a finger prick and must continue remaining steady in the app after you have applied a calibration. Calibration makes the BG reading typically to jump up or down, but the line should remain horizontal after this. You need to understand that the finger prick reading you see in BG reader, is shown in xDrip4iOS only after the above mentioned delay. If you calibrate when your BG is steady, you know that you are giving the app a chance to calculate the best possible calibration correction. If you calibrate, when BG is not steady, you are shooting a moving target. Being steady does not mean only that your actual BG is steady but that also the reading in the app is steady. Probably everyone who wears a sensor and has gone to swimming, in sauna, out in the cold, layed on a sofa pressure on sensor etc. etc. have seen that the sensor reading might suddenly rise or fall. If you calibrate when this happens, you can be certain that the applied calibration is bad and you get very inaccurate BG readings from the app. Over time, you might learn to make calibrations also when your BG is not 100 % steady, e.g. slowly coming down. This is however not recommended for newbies due to a high probability of making an error. Calibrate only when you are in range. There are two reasons to this: First reason is that you should not be too interested if you are 14 or 16 mmol/l or if you are 2,9 or 3,1 mmol/l. Either or, you know that you have a hyper or a hypo and you need to take actions. At this time the BG reading in the app and its accuracy does not matter that much. I.e. aim to get the in-range accuracy to be good and settle for that out-of-range accuracy might be so-so. Second reason is that the sensors themselves are the most accurate in range area and their inaccuracies increase when BG is outside the normal range. As we know, we want as accurate readings as possible, when calibrating, so you don't want to apply calibrations on top of inaccurate sensor readings. Of course, if the app says that you are out of range and shows 3,0 mmol/l but your actual BG (as per a finger prick) says 4,0 ( and your BG is steady), you can calibrate. No T1D wants to hear low alarms blazing, when they are not actually hypo'ing. Ensure you minimize the margin of error, when taking a finger prick : Use as accurate BG reader as possible. If you know that your sensor is inaccurate, consider updating it to a good one. Use strips that have not expired. While it's possible to use expired strips and get accurate readings with them as well, do you want to take the chance? Wash your hands before you take the reading. You might have some residues in your fingers, which impact the measurement - wash them off first. Don't squeeze your fingertip to get a blood drop out. Everyone knows how wild the sensor readings might be during the first 12-24 hours after a new sensor has been installed. This happens because the area where you applied the sensor is not yet used to the small filament that is inside your skin and via which the sensor takes readings. These sudden changes make also calibration more difficult. You can mitigate these if you attach a new sensor on your skin 12-24 hours before you actually take it in use . That way your skin has time to get used to the sensor and the readings are much more calm, when you start the sensor. If you calibrate during the 1st day of a sensor, that same calibration is most likely not accurate on the 10th day. It's good practice every once in a while to make a BG check with a finger prick when your BG is stable , and f the reading in Xdrip4iOS differs from that, you can consider calibrating. However, it doesn't necessarily make sense to calibrate if the difference is something like 0,1-0,4 mmol/l, because even the most accurate BG readers have some fault tolerance. It's more critical to be accurate in the lower-end of the scale than on the high side. So prioritize the accuracy of the low-end calibrations . For this it helps if you have installed (but not yet taken in to use) a new sensor but still taking the SG readings to Xdrip4iOS from the old one; when the readings are stable and at the low-end of the BG range, make a switch from old sensor to the new one. This way you can apply right away a good low-end calibration and be certain that at least the low alarms go off at the right time. You might screw an earlier nice calibration with just only one bad new calibration value. So don't calibrate for the sake of the calibration itself . When it comes to calibration, less is often more. You are not supposed to calibrate each and every day. If you feel like it and your BG is steady, you can do it, but it's completely fine to calibrate even just 3-4 times during the lifespan of a sensor. Make rather one good and accurate calibration than five sketchy ones. How to calibrate in xDrip4iOS? \u2301 G6 and ONE G6 and ONE do not use the xDrip4iOS calibration algorithms but send the calibration request directly to the transmitter the same way the Dexcom app would do. You cannot use xDrip algorithm with these sensors. Alright, if you've read these instructions this far, you are ready for calibration. This section gives you instructions on how you will apply a new calibration in xDrip4iOS. Select the calibration method you want to use: either \"Single-point calibration\" or \"Multi-point calibration\". You can make this selection in \"Bluetooth\" tab in the app inside your transmitter. On the main screen of the app, select \"Calibrate\" If you have just connected a new sensor (or resetted the calibrations by stop->start sensor), the app does not allow you to calibrate right away. You need to wait until the app gets at least two BG readings from the sensor, before a calibration can be applied. A pop-up opens, which asks you to enter a calibration value. Here you enter the value from your BG reader after a finger prick. DONE! After this, the app calculates the calibration curve as per the provided calibration value and starts to apply a correction to all the further BG readings coming from the sensor. Depending on the size of the calibration you did, you may notice right away that the graph on the screen of Xdrip4iOS jumped up or down - this is completely normal. It is also normal that the next BG value is not exactly the same value that you just entered as a calibration value. This happens because the entered calibration value is first used to calculate the new calibration curve and only this calibration curve (see \"Advanced Calibration Explanations\") is used to calculate the shown BG values in the app. Remember to monitor the readings in the app after a calibration; if they start to go up or down within 15-20 mins, there is a chance that your BG was not actually steady at the moment of the calibration, i.e. your actual BG had already started to change, but because this change was not yet visible in the app, the calibration was not accurate. Practice makes perfect and over time you might learn to do a relatively accurate calibrations, even when your BG is going slowly up or down, but the ground rule is: BG steady and in range. Please note If you notice that the calibration that you applied was bad (for whatever reason) and made the BG readings inaccurate, you can reset all the calibrations by stopping and starting the sensor. Unfortunately it is not possible to remove individual calibration values G6 and ONE Do NOT stop the sensor unless you physically want to remove it. Only use restart if you know what you're doing. * If you change the calibration method, it resets all the previous calibrations. Other notes \u2301 By default, xDrip4iOS has alerts to remind you to perform a calibration. If the app alerts you about this, it doesn't mean that you must do a new calibration. If you feel that these alerts/reminders occur too often, you can increase their interval. Often people turn calibration alerts even completely off. Sometimes a new calibration value makes the calibration slope and/or intercept to become something crazy without user noticing it right away. If you have a Nightscout installation, it is possible to see calibration curve there in the reports. There is a specific \"Calibrations\" report type for this. This report returns you the current and the past calibration graphs so that you can look at them and assess their accuracy. You can also compare the previous curve and the current curve and think how the calibration that you just did changed the curve. It is to be noted that in Nightscout reports , the calibration report shows the graph as inverted: sensor raw value is on Y axis and BG reading value after the calibration on the X axis. This means that you need to know how to read the graph and slope and intercept values reported by Nightscout - this part is not explained in these instructions more than these below: Values in these reports are shown based on 'mg/dl' and multiplied by 1000. On the report, the intercept value of \"-24000\" is actually a positive intercept of 24 mg/dl or 1,5 mmol/l On the report, the slope value of 1100 is actually slope of 0,91 (1/1,1)","title":"Calibration"},{"location":"configure/calibrate/#calibration-of-xdrip4ios","text":"Disclaimer No matter which calibration method you decide to use and/or how good you are in calibrating, there are many reasons and factors why xDrip4iOS can show values that differ greatly from your actual blood glucose. Due to this, use careful consideration if you are about to apply a correction bolus because the app says that you have a high blood glucose OR before you decide to take in some fast carbs, because the app is saying you have a hypo, but you don't feel like it at all. It is always recommended to take a proper finger prick test if you have any doubts about the accuracy of the reading shown in the app. Please note The most of the example blood glucose values in this instruction text is in unit of mmol/l. You can transform these values to mg/dl by multiplying the mmol/l figure by 18 (i.e. 1 mmol/l = 18 mg/dl).","title":"Calibration of xDrip4iOS"},{"location":"configure/calibrate/#what-does-calibration-mean","text":"Calibration is a functionality in many CGM apps with which user can make the calculations that use the sensor glucose (SG) readings sent by the sensor become much more accurate and closer to real blood glucose (BG).","title":"What does \"Calibration\" mean?"},{"location":"configure/calibrate/#why-do-we-need-to-calibrate","text":"SG readings sent by your sensor are so called \"raw\" values and the accuracy of these raw values depend on many things. Typical variables that have an impact are the time of how long the sensor has been attached to your skin; sensors are typically less accurate \"right out of the box\" and also 1-3 days before they expire. This is a natural behaviour of sensors and is completely normal. You might have also inserted the sensor into an area on your skin where it's harder for the sensor to get accurate readings. Also even sensors themselves vary; sometimes you get an accurate one which behaves nicely the whole time it is inserted and throughout the BG range, the other time the sensor can be all over the place and might even stop working before the official usage period ends. All this means that if you find that you are not happy with the (non-calibrated) accuracy of your current sensor, the calibration methods provided by xDrip4iOS help you to mitigate the above mentioned variables to make the BG readings in the app much more accurate. Important No calibration can accurate readings provided by a faulty/noisy sensor. If the sensor is providing erratic and highly fluctuating SG values, it is impossible for any application to correct these and show accurate readings to the user. For this reason it might be difficult to calibrate, when a sensor is new and the readings have not yet steadied out.","title":"Why do we need to calibrate?"},{"location":"configure/calibrate/#algorithms-and-calibration-methods","text":"G6 and ONE G6 and ONE do not use the xDrip4iOS calibration algorithms but send the calibration request directly to the transmitter the same way the Dexcom app would do. You cannot use xDrip algorithm with these sensors. xDrip4iOS application offers three different ways how the app interprets the raw SG values provided by the sensor. Each xDrip4iOS user needs to consider that what is the best method for themselves to use. Libre Transmitter algorithm (basic) xDrip algorithm with single-point calibration (recommended) xDrip algorithm with multi-point calibration (advanced use)","title":"Algorithms and calibration methods"},{"location":"configure/calibrate/#transmitter-algorithm","text":"Choose this method if you have just started to use xDrip4iOS and/or you are not (yet) familiar enough with the concept of calibration that you would like to try it out and/or you just want a simple setup and you are ok with the inaccuracies that come from this method. Transmitter algorithm is not an actual calibration method at all, but more of a default setting in the app for those users, who don't want to spend time on thinking when or how to calibrate. For this method the app has a specific built-in algorithm that applies a correction to the BG reading provided by the sensor and then the corrected BG reading is shown to the user. The user is not able to impact to the correction which is done by the algorithm. Please note when using Transmitter algorithm! There will most likely be small differences between the readings shown by the LibreLink app and readings shown by xDrip4iOS. Please expect that due to the lack of calibration there could be relatively large differences between the reading shown in xDrip4iOS and your actual blood glucose reading.","title":"Transmitter algorithm"},{"location":"configure/calibrate/#xdrip-algorithm-with-single-point-calibration","text":"Choose this method, when you want to get more accurate readings from the app and you are ready to apply a calibration, but you don't necessarily want to calibrate that often. Single-point calibration is a way of calibration where you make only one calibration based on which the app then applies a fixed positive or negative correction for the raw values that the sensor is sending. Single-point calibration applies correction only via intercept of the calibration curve (please read below \"Advanced Calibration Explanations\").","title":"xDrip algorithm with single-point calibration"},{"location":"configure/calibrate/#xdrip-algorithm-with-multi-point-calibration","text":"If you want the most accurate readings from the app and you are ready to pay more attention and to use more time on calibration. Multi-point calibration allows a way of calibration in which the user can enter different calibration values in different areas of the BG range which are then all taken into account when the app calculates the calibration curve. This means that the calibration curve can take into account the differences in the sensor raw value accuracy at low-end of BG range and in the high-end of BG range. The first calibration adjusts only the intercept of the calibration curve (please read below \"Advanced Calibration Explanations\") but the following calibrations after this adjust both the slope and the intercept. If done correctly, this calibration method can provide very accurate readings in the app, but if done wrongly also the magnitude of error can be much larger. In theory the more calibrations are added the more accurate the calibration becomes. However, in practice even just two good calibrations (one on the low-end of BG range and the other on the high-end) can make the calibration very accurate. This means that e.g. regular twice-a-day calibrations are not needed and they actually increase the possibility that the user eventually applies a faulty calibration, which makes the whole calibration go bad.","title":"xDrip algorithm with multi-point calibration"},{"location":"configure/calibrate/#advanced-calibration-explanations","text":"As described above, calibration is a way to reduce the inaccuracies that are coming from the sensor that you use. This section explains in more detail how Xdrip4iOS transforms the raw SG readings into calibrated BG readings that are then shown to the user in the main screen of the app. In practise the calibration is stored as a calibration curve in the app. This curve is used to apply a correction to the value provided by the sensor. This graph is not visible in the app, but can be described as a combination of slope and intercept - it makes it easier to understand these concepts, if you remember the lessons about 1st degree equations from the time you were in school :)","title":"Advanced Calibration Explanations"},{"location":"configure/calibrate/#slope","text":"The Slope describes the steepness/angle of the calibration curve. Slope (in the context of calibration) can be only positive and is typically something between 0,7-1,3. Slope is a multiplier that is applied to the raw value of the sensor throughout the BG range. If there is no calibration, slope gets a value of 1,0.","title":"Slope"},{"location":"configure/calibrate/#intercept","text":"The Intercept describes a fixed correction that is added (when positive) or deducted (when negative) from the raw value. Typical values for intercept are between -2,0.... +2,0 (in mmol/l). If there is no calibration, intercept gets a value of 0. Example #1 Slope = 1,0 / Intercept = 0,0 Result = No calibration. Raw value from sensor is shown as-is in the app: if sensor gives 5,0 mmol/l reading, the app shows 5,0 mmol/l reading. Example #2 Slope = 1,0 / Intercept = 0,3 Typical example of single-point calibration, where the calibration applies a small, fixed correction over the whole BG range. Remember that intercept can also be negative. In practice 0,3 mmol/l is added (deducted, if negative intercept) to any sensor raw value: if sensor gives a raw value of 5,0 mmol/l, the app shows 5,3 mmol/l, if the sensor gives a raw value of 9,3 mmol/l, the app shows 9,6 mmol/l. Example #13 Slope = 1,2 / Intercept = 0,0 Example of a calibration, where only the slope of the calibration is adjusted. In practice this type of a calibration means that throughout the BG range, a multiplier of 1,2 is applied to the raw value: if sensor gives a raw value of 5,0 mmol/l, the app shows 6.0 mmol/l (5,0 x 1,2), if the sensor gives a raw value of 9,3 mmol/l, the app shows 11,2 mmol/l (9,3 x 1,2). Example #4 Slope = 1,2 / Intercept = 0,3 Typical example of multi-point calibration after the 2nd (or further) calibration has been done. This applies both the fixed correction as per the intercept and also a multiplier as per the slope value: if sensor gives a raw value of 5,0 mmol/l, the app shows 6,3 mmol/l (5,0 x 1,2 + 0,3), if the sensor gives a raw value of 9,3 mmol/l, the app shows 11,5 mmol/l (9,3 x 1,2 + 0,3).","title":"Intercept"},{"location":"configure/calibrate/#calibration-best-practices","text":"Calibrate only when your BG is steady. While a finger prick gives you an accurate BG reading straight from your blood at that time, a sensor attached to your skin measures and estimates BG readings from interstitial fluid under your skin. When your actual BG fluctuates, these changes appear in interstitial fluid only after a delay. This delay can be anything between 5-20 mins. This means that your BG must have been steady when you take a finger prick and must continue remaining steady in the app after you have applied a calibration. Calibration makes the BG reading typically to jump up or down, but the line should remain horizontal after this. You need to understand that the finger prick reading you see in BG reader, is shown in xDrip4iOS only after the above mentioned delay. If you calibrate when your BG is steady, you know that you are giving the app a chance to calculate the best possible calibration correction. If you calibrate, when BG is not steady, you are shooting a moving target. Being steady does not mean only that your actual BG is steady but that also the reading in the app is steady. Probably everyone who wears a sensor and has gone to swimming, in sauna, out in the cold, layed on a sofa pressure on sensor etc. etc. have seen that the sensor reading might suddenly rise or fall. If you calibrate when this happens, you can be certain that the applied calibration is bad and you get very inaccurate BG readings from the app. Over time, you might learn to make calibrations also when your BG is not 100 % steady, e.g. slowly coming down. This is however not recommended for newbies due to a high probability of making an error. Calibrate only when you are in range. There are two reasons to this: First reason is that you should not be too interested if you are 14 or 16 mmol/l or if you are 2,9 or 3,1 mmol/l. Either or, you know that you have a hyper or a hypo and you need to take actions. At this time the BG reading in the app and its accuracy does not matter that much. I.e. aim to get the in-range accuracy to be good and settle for that out-of-range accuracy might be so-so. Second reason is that the sensors themselves are the most accurate in range area and their inaccuracies increase when BG is outside the normal range. As we know, we want as accurate readings as possible, when calibrating, so you don't want to apply calibrations on top of inaccurate sensor readings. Of course, if the app says that you are out of range and shows 3,0 mmol/l but your actual BG (as per a finger prick) says 4,0 ( and your BG is steady), you can calibrate. No T1D wants to hear low alarms blazing, when they are not actually hypo'ing. Ensure you minimize the margin of error, when taking a finger prick : Use as accurate BG reader as possible. If you know that your sensor is inaccurate, consider updating it to a good one. Use strips that have not expired. While it's possible to use expired strips and get accurate readings with them as well, do you want to take the chance? Wash your hands before you take the reading. You might have some residues in your fingers, which impact the measurement - wash them off first. Don't squeeze your fingertip to get a blood drop out. Everyone knows how wild the sensor readings might be during the first 12-24 hours after a new sensor has been installed. This happens because the area where you applied the sensor is not yet used to the small filament that is inside your skin and via which the sensor takes readings. These sudden changes make also calibration more difficult. You can mitigate these if you attach a new sensor on your skin 12-24 hours before you actually take it in use . That way your skin has time to get used to the sensor and the readings are much more calm, when you start the sensor. If you calibrate during the 1st day of a sensor, that same calibration is most likely not accurate on the 10th day. It's good practice every once in a while to make a BG check with a finger prick when your BG is stable , and f the reading in Xdrip4iOS differs from that, you can consider calibrating. However, it doesn't necessarily make sense to calibrate if the difference is something like 0,1-0,4 mmol/l, because even the most accurate BG readers have some fault tolerance. It's more critical to be accurate in the lower-end of the scale than on the high side. So prioritize the accuracy of the low-end calibrations . For this it helps if you have installed (but not yet taken in to use) a new sensor but still taking the SG readings to Xdrip4iOS from the old one; when the readings are stable and at the low-end of the BG range, make a switch from old sensor to the new one. This way you can apply right away a good low-end calibration and be certain that at least the low alarms go off at the right time. You might screw an earlier nice calibration with just only one bad new calibration value. So don't calibrate for the sake of the calibration itself . When it comes to calibration, less is often more. You are not supposed to calibrate each and every day. If you feel like it and your BG is steady, you can do it, but it's completely fine to calibrate even just 3-4 times during the lifespan of a sensor. Make rather one good and accurate calibration than five sketchy ones.","title":"Calibration Best Practices"},{"location":"configure/calibrate/#how-to-calibrate-in-xdrip4ios","text":"G6 and ONE G6 and ONE do not use the xDrip4iOS calibration algorithms but send the calibration request directly to the transmitter the same way the Dexcom app would do. You cannot use xDrip algorithm with these sensors. Alright, if you've read these instructions this far, you are ready for calibration. This section gives you instructions on how you will apply a new calibration in xDrip4iOS. Select the calibration method you want to use: either \"Single-point calibration\" or \"Multi-point calibration\". You can make this selection in \"Bluetooth\" tab in the app inside your transmitter. On the main screen of the app, select \"Calibrate\" If you have just connected a new sensor (or resetted the calibrations by stop->start sensor), the app does not allow you to calibrate right away. You need to wait until the app gets at least two BG readings from the sensor, before a calibration can be applied. A pop-up opens, which asks you to enter a calibration value. Here you enter the value from your BG reader after a finger prick. DONE! After this, the app calculates the calibration curve as per the provided calibration value and starts to apply a correction to all the further BG readings coming from the sensor. Depending on the size of the calibration you did, you may notice right away that the graph on the screen of Xdrip4iOS jumped up or down - this is completely normal. It is also normal that the next BG value is not exactly the same value that you just entered as a calibration value. This happens because the entered calibration value is first used to calculate the new calibration curve and only this calibration curve (see \"Advanced Calibration Explanations\") is used to calculate the shown BG values in the app. Remember to monitor the readings in the app after a calibration; if they start to go up or down within 15-20 mins, there is a chance that your BG was not actually steady at the moment of the calibration, i.e. your actual BG had already started to change, but because this change was not yet visible in the app, the calibration was not accurate. Practice makes perfect and over time you might learn to do a relatively accurate calibrations, even when your BG is going slowly up or down, but the ground rule is: BG steady and in range. Please note If you notice that the calibration that you applied was bad (for whatever reason) and made the BG readings inaccurate, you can reset all the calibrations by stopping and starting the sensor. Unfortunately it is not possible to remove individual calibration values G6 and ONE Do NOT stop the sensor unless you physically want to remove it. Only use restart if you know what you're doing. * If you change the calibration method, it resets all the previous calibrations.","title":"How to calibrate in xDrip4iOS?"},{"location":"configure/calibrate/#other-notes","text":"By default, xDrip4iOS has alerts to remind you to perform a calibration. If the app alerts you about this, it doesn't mean that you must do a new calibration. If you feel that these alerts/reminders occur too often, you can increase their interval. Often people turn calibration alerts even completely off. Sometimes a new calibration value makes the calibration slope and/or intercept to become something crazy without user noticing it right away. If you have a Nightscout installation, it is possible to see calibration curve there in the reports. There is a specific \"Calibrations\" report type for this. This report returns you the current and the past calibration graphs so that you can look at them and assess their accuracy. You can also compare the previous curve and the current curve and think how the calibration that you just did changed the curve. It is to be noted that in Nightscout reports , the calibration report shows the graph as inverted: sensor raw value is on Y axis and BG reading value after the calibration on the X axis. This means that you need to know how to read the graph and slope and intercept values reported by Nightscout - this part is not explained in these instructions more than these below: Values in these reports are shown based on 'mg/dl' and multiplied by 1000. On the report, the intercept value of \"-24000\" is actually a positive intercept of 24 mg/dl or 1,5 mmol/l On the report, the slope value of 1100 is actually slope of 0,91 (1/1,1)","title":"Other notes"},{"location":"configure/homeview/","text":"Home Screen \u2301 At the top of the view you will find shortcut icons: Snooze an alarm Display the sensor current status Calibrate your sensor Lock the display Online help Just below you'll see the current BG value and how long ago it was received by xDrip4iOS. On the right, the delta value refers to the difference between last and current measurement. The trend arrow is based on this delta value: it will not match Dexcom arrows (different calculation). The central part is used by the graphical display, you can customize it as explained here . You will also see treatments if you added them or received them from Nightscout. You can also change the time scale from 3 to 24 hours. Below the graph you'll see your BG statistics . They are defined using your objective values . You can display them on a timeframe ranging from one day (Today) to last 90 days. You can change HbA1c from % to mmol/l in your settings. You'll find more about these indicators here . The pie chart is based on data present in xDrip4iOS (number of days below). If you're using your phone in master mode, you will then see the sensor lifetime progress bar. You can set it to either increase (used days) or decrease (remaining days).","title":"Home Screen"},{"location":"configure/homeview/#home-screen","text":"At the top of the view you will find shortcut icons: Snooze an alarm Display the sensor current status Calibrate your sensor Lock the display Online help Just below you'll see the current BG value and how long ago it was received by xDrip4iOS. On the right, the delta value refers to the difference between last and current measurement. The trend arrow is based on this delta value: it will not match Dexcom arrows (different calculation). The central part is used by the graphical display, you can customize it as explained here . You will also see treatments if you added them or received them from Nightscout. You can also change the time scale from 3 to 24 hours. Below the graph you'll see your BG statistics . They are defined using your objective values . You can display them on a timeframe ranging from one day (Today) to last 90 days. You can change HbA1c from % to mmol/l in your settings. You'll find more about these indicators here . The pie chart is based on data present in xDrip4iOS (number of days below). If you're using your phone in master mode, you will then see the sensor lifetime progress bar. You can set it to either increase (used days) or decrease (remaining days).","title":"Home Screen"},{"location":"configure/smartwatches/","text":"Connecting to Smartwatches \u2301 xDrip4iOS can be used with several other types of popular smartwatches although the way of using them to see your data with change depending on the type of smartwatch used. Fitbit \u2301 Nightscout required. Ionic, Sense, Versa 1/2/3 and Lite Glucose value, graphs and Nightscout careportal integration Internet connection and Nightscout needed Once you have your BG data in Nightscout use a watchface like these . Garmin \u2301 Nightscout required. Forerunner or Fenix watches (Glucose Values, graphs) Garmin Edge cycle computers (Glucose Values) Internet connection and Nightscout needed Please note that xDrip4iOS does not have an internal http server so you will need to pull data from Nightscout. Once you have Nightscout running correctly, you will need to download Garmin IQ and Garmin Connect on your iPhone. Garmin IQ is used to download and configure the data field and Garmin Connect is used to send the data to your watch/Edge while you exercise. You will then need to configure one of your sports profiles (Ebike, mountain bike, etc) to use the data field you configured in the previous step. There is a handy guide here: How to View CGM Data on a Garmin Watch or Bike Computer Xiaomi MiBand \u2301 MiBand 4, 5 or 6 Glucose values only Uses iPhone notifications (offline) Instructions pending Amazfit \u2301 GTS Glucose values only Uses iPhone notifications (offline) Instructions pending","title":"Other Smartwatches"},{"location":"configure/smartwatches/#connecting-to-smartwatches","text":"xDrip4iOS can be used with several other types of popular smartwatches although the way of using them to see your data with change depending on the type of smartwatch used.","title":"Connecting to Smartwatches"},{"location":"configure/smartwatches/#fitbit","text":"Nightscout required. Ionic, Sense, Versa 1/2/3 and Lite Glucose value, graphs and Nightscout careportal integration Internet connection and Nightscout needed Once you have your BG data in Nightscout use a watchface like these .","title":"Fitbit"},{"location":"configure/smartwatches/#garmin","text":"Nightscout required. Forerunner or Fenix watches (Glucose Values, graphs) Garmin Edge cycle computers (Glucose Values) Internet connection and Nightscout needed Please note that xDrip4iOS does not have an internal http server so you will need to pull data from Nightscout. Once you have Nightscout running correctly, you will need to download Garmin IQ and Garmin Connect on your iPhone. Garmin IQ is used to download and configure the data field and Garmin Connect is used to send the data to your watch/Edge while you exercise. You will then need to configure one of your sports profiles (Ebike, mountain bike, etc) to use the data field you configured in the previous step. There is a handy guide here: How to View CGM Data on a Garmin Watch or Bike Computer","title":"Garmin"},{"location":"configure/smartwatches/#xiaomi-miband","text":"MiBand 4, 5 or 6 Glucose values only Uses iPhone notifications (offline) Instructions pending","title":"Xiaomi MiBand"},{"location":"configure/smartwatches/#amazfit","text":"GTS Glucose values only Uses iPhone notifications (offline) Instructions pending","title":"Amazfit"},{"location":"configure/treatments/","text":"Treatments \u2301 In this menu you can see the list of treatments and add also add them to xDrip4iOS. Touching a treatment allows you to modify it. To delete it swipe it to the left and touch Delete. These will also be applied to Nightscout. You can enter a new treatment with the yellow + button. Add all the data, check the time you actually did the treatment then touch Done to save it. Treatments will be sent to and downloaded from Nightscout. You can display treatments on the home view. Carbs show as an orange circle, grams written above. Insulin is the blue triangle at the bottom, units are displayed if above the micro-bolus threshold . Micro bolus visualization can be disabled. BG checks display as a red dot.","title":"Treatments"},{"location":"configure/treatments/#treatments","text":"In this menu you can see the list of treatments and add also add them to xDrip4iOS. Touching a treatment allows you to modify it. To delete it swipe it to the left and touch Delete. These will also be applied to Nightscout. You can enter a new treatment with the yellow + button. Add all the data, check the time you actually did the treatment then touch Done to save it. Treatments will be sent to and downloaded from Nightscout. You can display treatments on the home view. Carbs show as an orange circle, grams written above. Insulin is the blue triangle at the bottom, units are displayed if above the micro-bolus threshold . Micro bolus visualization can be disabled. BG checks display as a red dot.","title":"Treatments"},{"location":"connect/","text":"Connect a Data Source \u2301 Master or Follower? \u2301 In order to be able to see Blood Glucose data in xDrip4iOS, you need to connect it to a data source . There are two types of data sources that you can use: In Master mode, your iPhone will connect directly to a Bluetooth-enabled CGM system (sensor/transmitter) in order to receive real-time data. In Follower mode, your iPhone will connect to a Nightscout site over the internet and pull real-time data. Put simply, a Master is usually used by the actual person who is wearing the sensor and a Follower is usually a parent/friend/caregiver that wants to be able to track (follow) the other person's CGM values. Once we've decided whether we want to use xDrip4iOS as a Master or a Follower device, we need to click on the Settings tab and chose the mode we want. Click on the option if you need to change it between the two modes. Blood Glucose Unit \u2301 The next step is to make sure that the Blood Glucose unit is correctly set. If you are used to seeing your BG values as small numbers with a single decimal place such as 4.7, 6.3 or 10.4 then you are using mmol/l . (Common in Canada, Northen Europe, Australia, South Africa, China etc) If you usually see your BG values as bigger numbers such as 76, 127 or 215 then you are using mg/dl . (Common in USA, Southern Europe, India, Japan, Central/South America etc) Once you've set your device mode and BG unit, you're ready to connect a data source. Click here to connect to your CGM as a Master Click here to connect to Nightscout as a Follower","title":"Initial Configuration"},{"location":"connect/#connect-a-data-source","text":"","title":"Connect a Data Source"},{"location":"connect/#master-or-follower","text":"In order to be able to see Blood Glucose data in xDrip4iOS, you need to connect it to a data source . There are two types of data sources that you can use: In Master mode, your iPhone will connect directly to a Bluetooth-enabled CGM system (sensor/transmitter) in order to receive real-time data. In Follower mode, your iPhone will connect to a Nightscout site over the internet and pull real-time data. Put simply, a Master is usually used by the actual person who is wearing the sensor and a Follower is usually a parent/friend/caregiver that wants to be able to track (follow) the other person's CGM values. Once we've decided whether we want to use xDrip4iOS as a Master or a Follower device, we need to click on the Settings tab and chose the mode we want. Click on the option if you need to change it between the two modes.","title":"Master or Follower?"},{"location":"connect/#blood-glucose-unit","text":"The next step is to make sure that the Blood Glucose unit is correctly set. If you are used to seeing your BG values as small numbers with a single decimal place such as 4.7, 6.3 or 10.4 then you are using mmol/l . (Common in Canada, Northen Europe, Australia, South Africa, China etc) If you usually see your BG values as bigger numbers such as 76, 127 or 215 then you are using mg/dl . (Common in USA, Southern Europe, India, Japan, Central/South America etc) Once you've set your device mode and BG unit, you're ready to connect a data source. Click here to connect to your CGM as a Master Click here to connect to Nightscout as a Follower","title":"Blood Glucose Unit"},{"location":"connect/cgm/","text":"Connect to a CGM as a Master Device \u2301 In this page, we will go through the method of connecting a CGM system to xDrip4iOS so that this receives real-time CGM data from your sensor. Firstly, make sure you have correctly set xDrip4iOS as a Master device and you have chosen the units that your BG should be displayed in. Do not try and connect to your CGM transmitter from the Bluetooth menu on your iPhone. You must only connect from within the xDrip4iOS app. Before continuing, please check the compatibility tables to make sure that your CGM system is compatible. Libre \u2301 Libre 2 Direct Connection \u2301 Compatibility This is only valid for the European Libre 2 sensor (aka Libre2 EU). More information here . Firstly make sure that your Libre 2 sensor is started and working. If you scan the sensor with the LibreLink app, can you see the values/graph ? If not , start the sensor from the LibreLink app or put a new sensor on and start it. Then go back to the previous step until it works. If yes , then let's continue. Disable LibreLink Bluetooth Permission To avoid problems with the LibreLink app \"stealing\" the Bluetooth connection from xDrip4iOS, we need to ensure that the LibreLink app has it's Bluetooth permissions disabled. Go to your iPhone Settings and scroll down to LibreLink. Select the app and in the options, disable Bluetooth. Connect to the Libre 2 Go to the Bluetooth tab and choose CGM as your Device Type , press OK . If you already have a Libre 2 connected, add a second Libre 2 CGM device and continue reading. Once connected to the new one, you can delete the previous Libre 2 CGM. If you already have a previous CGM added (and it is not a Libre 2), you will get a warning that says that you can only have one CGM device added at a time. Please delete the previous device and try again (only if it is not a Libre 2). In the Transmitter Types, select Libre 2 and click OK. You will get a message to Scan your sensor with the NFC antenna of your iPhone. You should scan the sensor as you would to start/read the sensor using the Libre app. If you get an error message, please repeat adding the Libre 2 and scan again. Once your sensor has been scanned successfully, you will see a message asking you to keep xDrip4iOS open whilst the Bluetooth connection is made. Just leave your iPhone on the table and have a coffee. DO NOT play Roblox, watch Netflix or listen to Spotify. Put the phone down without touching it and keep it close to you. When xDrip4iOS finds your sensor, you will get a message saying the the sensor has been connected correctly. Click OK . You can now choose if you want to use the Transmitter algorithm (no calibration required) or deselect this option to use the xDrip algorithm with manual calibrations ( recommended ). Wait for up to 10-15 minutes for xDrip4iOS to receive the first two readings from your sensor. If you are using the Transmitter algorithm , you will then automatically start getting values. If you are using the xDrip algorithm , xDrip4iOS will ask you for an initial calibration. Make sure you use a good blood glucose meter and follow the calibration rules where possible. If you just changed sensor and you have data from the new one, you can now delete the old Libre 2 sensor from the CGM list. Libre 1/2 with a Transmitter \u2301 Compatibility This method is only valid for the Libre 1 or European Libre 2 sensors with a compatible transmitter such as MiaoMiao, Bubble, Droplet... Disable other apps connected to the transmitter Bluetooth Permission To avoid problems with other apps (Tomato, Diabox, zDrip, ...) \"stealing\" the Bluetooth connection from xDrip4iOS, we need to ensure that they have their Bluetooth permissions disabled. Go to your iPhone Settings and scroll down the app. Select it and in the options, disable Bluetooth. Firstly make sure that your Libre sensor is started and working. If you scan the sensor with the LibreLink app, can you see the values/graph ? If not , start the sensor from the LibreLink app or put a new sensor on and start it. Then go back to the previous step until it works. If yes , then let's continue. Add your Transmitter To to the Bluetooth tab and click the + button to add a new Device Type. Select CGM and then chose your transmitter type from the list. You will get a message asking you to keep xDrip4iOS open whilst the bluetooth connection is made with your transmitter. Just leave your iPhone on the table and have a coffee. DO NOT play Roblox, watch Netflix or listen to Spotify. Put the phone down without touching it and keep it close to you. Do it now. When xDrip4iOS finds your transmitter, you will get a message saying that it has been connected correctly. Click OK . You can now choose if you want to use the Transmitter algorithm (no calibration required) or deselect this option to use the xDrip algorithm with manual calibrations ( recommended ). Wait for up to 10-15 minutes for xDrip4iOS to receive the first two readings from your sensor. If you are using the Transmitter algorithm , you will then automatically start getting values. If you are using the xDrip algorithm , xDrip4iOS will ask you for an initial calibration. Make sure you use a good blood glucose meter and follow the calibration rules where possible. Dexcom \u2301 Compatibility This method is valid for all Dexcom G4/G5 and G6/ONE systems. See here for more information. Dexcom G4 To connect to a Dexcom G4 transmitter, a xDrip Wireless Bridge (Wixel) is needed. More information is available here Disable the Dexcom app connected to the transmitter Bluetooth Permission To avoid problems the Dexcom G5/G6/ONE master app \"stealing\" the Bluetooth connection from xDrip4iOS, we need to ensure that it has its Bluetooth permissions disabled. Go to your iPhone Settings and scroll down the app. Select the Dexcom app and in the options, disable Bluetooth. You will be able to enable it back later on if you wish. To to the Bluetooth tab and click the + button to add a new Device Type. Select CGM and then chose your Dexcom system (G4/G5/G6) from the list. You will be prompted to input your Transmitter ID (for example: 80H9W4 ). Once you have entered your Transmitter ID, you will see a message asking you to keep xDrip4iOS open whilst the transmitter is found and a Bluetooth connection is made. Just leave your iPhone on the table and have a coffee. DO NOT play Roblox, watch Netflix or listen to Spotify. Put the phone down without touching it and stay close to it. When xDrip4iOS finds your transmitter, you will get a message saying that it has been connected correctly. Click OK . Once connected, you will always see its status as Scanning since it only communicates for a short period of time every 5 minutes. If you're using a Dexcom 6 or ONE sensor, you will be prompted to enter the calibration code reported on the sensor box once warm-up is complete. Once the transmitter paired, you can enable Follow Dexcom-app and re-enable Bluetooth in the Dexcom app on your phone. Both xDrip4iOS and the Dexcom app will be connected to the sensor. This allows you to use the best of both (Clarity uploads and xDrip4iOS unique features). Dexcom Share Upload \u2301 This feature is not available with Dexcom ONE. You can configure xDrip4iOS to upload your G5/G6 sensor data to your Dexcom Share account. Dexcom Share You must have an invitation sent (even to yourself) by the Dexcom app to enable sharing. You can then use xDrip4iOS to share your data with any follower app (official and third party). In the Settings Menu, enable Upload to Dexcom Share , enter you account/user name and password. If you are inside the US, then also select the Use Dexcom US Servers option. If you are anywhere else (Canada, Europe etc, do not select this option) This will not upload your data inside Clarity as only the Dexcom app can do this. Nightscout Upload \u2301 Nightscout (also known as \"CGM In The Cloud\" ) is an open-source, cloud-based platform for storing, sharing and analysing CGM and treament data. Nightscout is one of the key pillars at the heart of the #wearenotwaiting community. We fully recommend all users to take advantage of this platform as it will open up many possibilities (sharing CGM data/alarms with family members, sharing CGM values to other devices, watches, tablets). Please see the main Nightscout documentation site for further information and set-up instructions. Further help and support can be found in the CGM In The Cloud Facebook group here In order to connect xDrip4iOS to Nightscout and upload your CGM data, in the Settings Menu, select Enable Nightscout . You should enter your Nightscout URL as per the service you are using. Examples (change mynightscout and 12345 as necessary) Heroku/Mongo : https://mynightscout.herokuapp.com ns.10be.de (1) : https://mynightscout.10be.de Port: 12345 ( Note: you'll find your URL, port and API secret in the Server page ) T1Pal : https://mynightscout.t1pal.com ( Note: you'll find your Uploader Url and Api Secret in the Uploaders page ) (1) If your URL needs a port number to access the service (such as the default mode of ns.10be.de), then enter this number in Port . Finally, enter your API_SECRET which should be a 12 character \"password\" that you configured when setting up your Nightscout installation. Without this, xDrip4iOS will not be able to write data to Nightscout. If you want to check that your Nightscout credentials are correct, you can press the \"Test Connection\" button and you will get a message with the result of the test.","title":"Connect to CGM as a Master"},{"location":"connect/cgm/#connect-to-a-cgm-as-a-master-device","text":"In this page, we will go through the method of connecting a CGM system to xDrip4iOS so that this receives real-time CGM data from your sensor. Firstly, make sure you have correctly set xDrip4iOS as a Master device and you have chosen the units that your BG should be displayed in. Do not try and connect to your CGM transmitter from the Bluetooth menu on your iPhone. You must only connect from within the xDrip4iOS app. Before continuing, please check the compatibility tables to make sure that your CGM system is compatible.","title":"Connect to a CGM as a Master Device"},{"location":"connect/cgm/#libre","text":"","title":"Libre"},{"location":"connect/cgm/#libre-2-direct-connection","text":"Compatibility This is only valid for the European Libre 2 sensor (aka Libre2 EU). More information here . Firstly make sure that your Libre 2 sensor is started and working. If you scan the sensor with the LibreLink app, can you see the values/graph ? If not , start the sensor from the LibreLink app or put a new sensor on and start it. Then go back to the previous step until it works. If yes , then let's continue. Disable LibreLink Bluetooth Permission To avoid problems with the LibreLink app \"stealing\" the Bluetooth connection from xDrip4iOS, we need to ensure that the LibreLink app has it's Bluetooth permissions disabled. Go to your iPhone Settings and scroll down to LibreLink. Select the app and in the options, disable Bluetooth. Connect to the Libre 2 Go to the Bluetooth tab and choose CGM as your Device Type , press OK . If you already have a Libre 2 connected, add a second Libre 2 CGM device and continue reading. Once connected to the new one, you can delete the previous Libre 2 CGM. If you already have a previous CGM added (and it is not a Libre 2), you will get a warning that says that you can only have one CGM device added at a time. Please delete the previous device and try again (only if it is not a Libre 2). In the Transmitter Types, select Libre 2 and click OK. You will get a message to Scan your sensor with the NFC antenna of your iPhone. You should scan the sensor as you would to start/read the sensor using the Libre app. If you get an error message, please repeat adding the Libre 2 and scan again. Once your sensor has been scanned successfully, you will see a message asking you to keep xDrip4iOS open whilst the Bluetooth connection is made. Just leave your iPhone on the table and have a coffee. DO NOT play Roblox, watch Netflix or listen to Spotify. Put the phone down without touching it and keep it close to you. When xDrip4iOS finds your sensor, you will get a message saying the the sensor has been connected correctly. Click OK . You can now choose if you want to use the Transmitter algorithm (no calibration required) or deselect this option to use the xDrip algorithm with manual calibrations ( recommended ). Wait for up to 10-15 minutes for xDrip4iOS to receive the first two readings from your sensor. If you are using the Transmitter algorithm , you will then automatically start getting values. If you are using the xDrip algorithm , xDrip4iOS will ask you for an initial calibration. Make sure you use a good blood glucose meter and follow the calibration rules where possible. If you just changed sensor and you have data from the new one, you can now delete the old Libre 2 sensor from the CGM list.","title":"Libre 2 Direct Connection"},{"location":"connect/cgm/#libre-12-with-a-transmitter","text":"Compatibility This method is only valid for the Libre 1 or European Libre 2 sensors with a compatible transmitter such as MiaoMiao, Bubble, Droplet... Disable other apps connected to the transmitter Bluetooth Permission To avoid problems with other apps (Tomato, Diabox, zDrip, ...) \"stealing\" the Bluetooth connection from xDrip4iOS, we need to ensure that they have their Bluetooth permissions disabled. Go to your iPhone Settings and scroll down the app. Select it and in the options, disable Bluetooth. Firstly make sure that your Libre sensor is started and working. If you scan the sensor with the LibreLink app, can you see the values/graph ? If not , start the sensor from the LibreLink app or put a new sensor on and start it. Then go back to the previous step until it works. If yes , then let's continue. Add your Transmitter To to the Bluetooth tab and click the + button to add a new Device Type. Select CGM and then chose your transmitter type from the list. You will get a message asking you to keep xDrip4iOS open whilst the bluetooth connection is made with your transmitter. Just leave your iPhone on the table and have a coffee. DO NOT play Roblox, watch Netflix or listen to Spotify. Put the phone down without touching it and keep it close to you. Do it now. When xDrip4iOS finds your transmitter, you will get a message saying that it has been connected correctly. Click OK . You can now choose if you want to use the Transmitter algorithm (no calibration required) or deselect this option to use the xDrip algorithm with manual calibrations ( recommended ). Wait for up to 10-15 minutes for xDrip4iOS to receive the first two readings from your sensor. If you are using the Transmitter algorithm , you will then automatically start getting values. If you are using the xDrip algorithm , xDrip4iOS will ask you for an initial calibration. Make sure you use a good blood glucose meter and follow the calibration rules where possible.","title":"Libre 1/2 with a Transmitter"},{"location":"connect/cgm/#dexcom","text":"Compatibility This method is valid for all Dexcom G4/G5 and G6/ONE systems. See here for more information. Dexcom G4 To connect to a Dexcom G4 transmitter, a xDrip Wireless Bridge (Wixel) is needed. More information is available here Disable the Dexcom app connected to the transmitter Bluetooth Permission To avoid problems the Dexcom G5/G6/ONE master app \"stealing\" the Bluetooth connection from xDrip4iOS, we need to ensure that it has its Bluetooth permissions disabled. Go to your iPhone Settings and scroll down the app. Select the Dexcom app and in the options, disable Bluetooth. You will be able to enable it back later on if you wish. To to the Bluetooth tab and click the + button to add a new Device Type. Select CGM and then chose your Dexcom system (G4/G5/G6) from the list. You will be prompted to input your Transmitter ID (for example: 80H9W4 ). Once you have entered your Transmitter ID, you will see a message asking you to keep xDrip4iOS open whilst the transmitter is found and a Bluetooth connection is made. Just leave your iPhone on the table and have a coffee. DO NOT play Roblox, watch Netflix or listen to Spotify. Put the phone down without touching it and stay close to it. When xDrip4iOS finds your transmitter, you will get a message saying that it has been connected correctly. Click OK . Once connected, you will always see its status as Scanning since it only communicates for a short period of time every 5 minutes. If you're using a Dexcom 6 or ONE sensor, you will be prompted to enter the calibration code reported on the sensor box once warm-up is complete. Once the transmitter paired, you can enable Follow Dexcom-app and re-enable Bluetooth in the Dexcom app on your phone. Both xDrip4iOS and the Dexcom app will be connected to the sensor. This allows you to use the best of both (Clarity uploads and xDrip4iOS unique features).","title":"Dexcom"},{"location":"connect/cgm/#dexcom-share-upload","text":"This feature is not available with Dexcom ONE. You can configure xDrip4iOS to upload your G5/G6 sensor data to your Dexcom Share account. Dexcom Share You must have an invitation sent (even to yourself) by the Dexcom app to enable sharing. You can then use xDrip4iOS to share your data with any follower app (official and third party). In the Settings Menu, enable Upload to Dexcom Share , enter you account/user name and password. If you are inside the US, then also select the Use Dexcom US Servers option. If you are anywhere else (Canada, Europe etc, do not select this option) This will not upload your data inside Clarity as only the Dexcom app can do this.","title":"Dexcom Share Upload"},{"location":"connect/cgm/#nightscout-upload","text":"Nightscout (also known as \"CGM In The Cloud\" ) is an open-source, cloud-based platform for storing, sharing and analysing CGM and treament data. Nightscout is one of the key pillars at the heart of the #wearenotwaiting community. We fully recommend all users to take advantage of this platform as it will open up many possibilities (sharing CGM data/alarms with family members, sharing CGM values to other devices, watches, tablets). Please see the main Nightscout documentation site for further information and set-up instructions. Further help and support can be found in the CGM In The Cloud Facebook group here In order to connect xDrip4iOS to Nightscout and upload your CGM data, in the Settings Menu, select Enable Nightscout . You should enter your Nightscout URL as per the service you are using. Examples (change mynightscout and 12345 as necessary) Heroku/Mongo : https://mynightscout.herokuapp.com ns.10be.de (1) : https://mynightscout.10be.de Port: 12345 ( Note: you'll find your URL, port and API secret in the Server page ) T1Pal : https://mynightscout.t1pal.com ( Note: you'll find your Uploader Url and Api Secret in the Uploaders page ) (1) If your URL needs a port number to access the service (such as the default mode of ns.10be.de), then enter this number in Port . Finally, enter your API_SECRET which should be a 12 character \"password\" that you configured when setting up your Nightscout installation. Without this, xDrip4iOS will not be able to write data to Nightscout. If you want to check that your Nightscout credentials are correct, you can press the \"Test Connection\" button and you will get a message with the result of the test.","title":"Nightscout Upload"},{"location":"connect/devices/","text":"M5Stack and M5Stick Devices \u2301 Using a modified version of Martin Lukasek's M5Stack_NightscoutMon You can connect ESP32 displays directly to your phone trough Bluetooth to display your readings. Binaries are directly available for M5Stack Core and M5Stick C device. If you wish to use different devices like M5Stack Core 2 you'll need to compile the code with Arduino . Two guides are provided below, using a Windows computer is usually easier. Mac instructions are here . Installing with a Windows-based Computer \u2301 This guide explains step by step how to program your M5Stack with the M5Burner utility (Arduino not required). Install the M5Stack USB Driver \u2301 If your computer runs Windows 10 \u2301 Go here: https://docs.m5stack.com/#/en/arduino/arduino_development and download the driver. If you\u2019re running an older version of Windows \u2301 Go to of SiLabs https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers and choose the version matching your operating system. In the Downloads folder, extract the .zip file Open the extracted folder and run the installer for the correct platform type of the driver. Next, Accept, Next, Finish. Connect your M5Stack device and wait a moment to make sure your computer recognized it. NB: If you have previous versions of SiLabs drivers you might need to remove them in order to see the M5Stack serial port. Download the Latest Release \u2301 M5Stack : Open this link in a new tab https://github.com/JohanDegraeve/M5_NightscoutMon/releases M5StickC : Open this link in a new tab https://github.com/JohanDegraeve/M5_StickC_xdrip_iOS/releases Note: take the latest release for your device and not the one from the example below From the Downloads folder, extract the .zip file to C:\\ You can extract it wherever you want, but avoid a path name with spaces inside. Click Extract Program the M5Stack \u2301 Open the device manager and check: M5Stack is available Which COM port it uses From the folder C:\\M5Burner_NightscoutMon (or the other folder you selected when extracting the .zip file) run the program M5Burner.exe If your computer uses Windows Defender you will need to authorize it to run. This program was provided directly from M5Stack (Shenzhen Mingzhan Information Technology Co., Ltd.) with authorization to redistribute. We consider it as safe to run. The application opens, select your COM port, make baudrate 921600 and select the M5_NightscoutMon firmware. Note: I removed the COM number to avoid confusion since it might be different. Click Burn Installing with a MacOS-based computer \u2301 This guide explains step by step how to program your M5Stack with the ESPTool utility (Arduino not required). Install the M5Stack USB Driver \u2301 If your computer runs a recent MacOS version \u2301 Go here: https://docs.m5stack.com/#/en/arduino/arduino_development and download the driver. If you\u2019re running an older MacOS version \u2301 Go to of SiLabs https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers and choose the version matching your operating system. Allow download and open finder to Downloads, folder Mac_OSX_VCP_Driver, double click the SiLabsUSBDriverDisk.dmg. The disk will extract on your desktop. Open it and run the installer. Select Open Click Continue, Continue, Agree to license\u2026 Continue, enter your password, Continue, Open Security Preferences Unlock the panel (enter your password) and allow the driver, close Security & Privacy Wait until the install completes and close. Connect the M5Stack device to your computer. Install the ESPTool \u2301 Install Homebrew \u2301 Open a terminal, copy and paste: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" Enter your password when required, press RETURN to continue. It will take some time, be patient. Then enter: brew install esptool Wait until the command completes. Connect your M5Stack to an USB plug of your Mac and enter: esptool.py flash_id If your device is recognized correctly you will get the path of the serial port: Take note of the port, in this case it is /dev/cu.SLAB_USBtoUART (yours might be different) Download the Latest Release \u2301 M5Stack: Open this link in a new tab https://github.com/JohanDegraeve/M5_NightscoutMon/releases M5Stick: Open this link in a new tab https://github.com/JohanDegraeve/M5_StickC_xdrip_iOS/releases Note: take the latest release for your device and not the one from the example below Allow downloads on \"github.com\" if required. Once completed open your Download folder and navigate to M5_NightscoutMon below firmwares, inside M5Burner_NightscoutMon Program the M5Stack \u2301 Right click on the folder and select New terminal at folder. A new terminal will open. Copy and paste the following command verifying the port is identical to the one you noted before: esptool.py --chip esp32 --port /dev/cu.SLAB_USBtoUART --baud 921600 --before default_reset --after hard_reset write_flash -z --flash_freq 40m 0x1000 bootloader_0x1000.bin 0x10000 M5_NightscoutMon.ino.bin 0x8000 M5_NightscoutMon.ino.partitions.bin Wait until the command completes Connect to xDrip4iOS \u2301 Your M5Stack should boot up like this and wait for connection from xDrip4iOS. Open xDrip4iOS Bluetooth and add a new device. Select M5Stack then your device type and finally Scan. Note: If your device was already connected follow the instructions to reset the password (disconnect, reset and connect). Your device will display the glucose value from xDrip4iOS when xDrip4iOS displays a value, and when within Bluetooth range. You can modify some settings like colors, screen rotation, and eventually turn of the monitor. More features documented in the project repositories https://github.com/JohanDegraeve/M5_NightscoutMon#readme and https://github.com/JohanDegraeve/M5_StickC_xdrip_iOS#readme","title":"Connect to M5Stack/M5StickC"},{"location":"connect/devices/#m5stack-and-m5stick-devices","text":"Using a modified version of Martin Lukasek's M5Stack_NightscoutMon You can connect ESP32 displays directly to your phone trough Bluetooth to display your readings. Binaries are directly available for M5Stack Core and M5Stick C device. If you wish to use different devices like M5Stack Core 2 you'll need to compile the code with Arduino . Two guides are provided below, using a Windows computer is usually easier. Mac instructions are here .","title":"M5Stack and M5Stick Devices"},{"location":"connect/devices/#installing-with-a-windows-based-computer","text":"This guide explains step by step how to program your M5Stack with the M5Burner utility (Arduino not required).","title":"Installing with a Windows-based Computer"},{"location":"connect/devices/#install-the-m5stack-usb-driver","text":"","title":"Install the M5Stack USB Driver"},{"location":"connect/devices/#if-your-computer-runs-windows-10","text":"Go here: https://docs.m5stack.com/#/en/arduino/arduino_development and download the driver.","title":"If your computer runs Windows 10"},{"location":"connect/devices/#if-youre-running-an-older-version-of-windows","text":"Go to of SiLabs https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers and choose the version matching your operating system. In the Downloads folder, extract the .zip file Open the extracted folder and run the installer for the correct platform type of the driver. Next, Accept, Next, Finish. Connect your M5Stack device and wait a moment to make sure your computer recognized it. NB: If you have previous versions of SiLabs drivers you might need to remove them in order to see the M5Stack serial port.","title":"If you\u2019re running an older version of Windows"},{"location":"connect/devices/#download-the-latest-release","text":"M5Stack : Open this link in a new tab https://github.com/JohanDegraeve/M5_NightscoutMon/releases M5StickC : Open this link in a new tab https://github.com/JohanDegraeve/M5_StickC_xdrip_iOS/releases Note: take the latest release for your device and not the one from the example below From the Downloads folder, extract the .zip file to C:\\ You can extract it wherever you want, but avoid a path name with spaces inside. Click Extract","title":"Download the Latest Release"},{"location":"connect/devices/#program-the-m5stack","text":"Open the device manager and check: M5Stack is available Which COM port it uses From the folder C:\\M5Burner_NightscoutMon (or the other folder you selected when extracting the .zip file) run the program M5Burner.exe If your computer uses Windows Defender you will need to authorize it to run. This program was provided directly from M5Stack (Shenzhen Mingzhan Information Technology Co., Ltd.) with authorization to redistribute. We consider it as safe to run. The application opens, select your COM port, make baudrate 921600 and select the M5_NightscoutMon firmware. Note: I removed the COM number to avoid confusion since it might be different. Click Burn","title":"Program the M5Stack"},{"location":"connect/devices/#installing-with-a-macos-based-computer","text":"This guide explains step by step how to program your M5Stack with the ESPTool utility (Arduino not required).","title":"Installing with a MacOS-based computer"},{"location":"connect/devices/#install-the-m5stack-usb-driver_1","text":"","title":"Install the M5Stack USB Driver"},{"location":"connect/devices/#if-your-computer-runs-a-recent-macos-version","text":"Go here: https://docs.m5stack.com/#/en/arduino/arduino_development and download the driver.","title":"If your computer runs a recent MacOS version"},{"location":"connect/devices/#if-youre-running-an-older-macos-version","text":"Go to of SiLabs https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers and choose the version matching your operating system. Allow download and open finder to Downloads, folder Mac_OSX_VCP_Driver, double click the SiLabsUSBDriverDisk.dmg. The disk will extract on your desktop. Open it and run the installer. Select Open Click Continue, Continue, Agree to license\u2026 Continue, enter your password, Continue, Open Security Preferences Unlock the panel (enter your password) and allow the driver, close Security & Privacy Wait until the install completes and close. Connect the M5Stack device to your computer.","title":"If you\u2019re running an older MacOS version"},{"location":"connect/devices/#install-the-esptool","text":"","title":"Install the ESPTool"},{"location":"connect/devices/#install-homebrew","text":"Open a terminal, copy and paste: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" Enter your password when required, press RETURN to continue. It will take some time, be patient. Then enter: brew install esptool Wait until the command completes. Connect your M5Stack to an USB plug of your Mac and enter: esptool.py flash_id If your device is recognized correctly you will get the path of the serial port: Take note of the port, in this case it is /dev/cu.SLAB_USBtoUART (yours might be different)","title":"Install Homebrew"},{"location":"connect/devices/#download-the-latest-release_1","text":"M5Stack: Open this link in a new tab https://github.com/JohanDegraeve/M5_NightscoutMon/releases M5Stick: Open this link in a new tab https://github.com/JohanDegraeve/M5_StickC_xdrip_iOS/releases Note: take the latest release for your device and not the one from the example below Allow downloads on \"github.com\" if required. Once completed open your Download folder and navigate to M5_NightscoutMon below firmwares, inside M5Burner_NightscoutMon","title":"Download the Latest Release"},{"location":"connect/devices/#program-the-m5stack_1","text":"Right click on the folder and select New terminal at folder. A new terminal will open. Copy and paste the following command verifying the port is identical to the one you noted before: esptool.py --chip esp32 --port /dev/cu.SLAB_USBtoUART --baud 921600 --before default_reset --after hard_reset write_flash -z --flash_freq 40m 0x1000 bootloader_0x1000.bin 0x10000 M5_NightscoutMon.ino.bin 0x8000 M5_NightscoutMon.ino.partitions.bin Wait until the command completes","title":"Program the M5Stack"},{"location":"connect/devices/#connect-to-xdrip4ios","text":"Your M5Stack should boot up like this and wait for connection from xDrip4iOS. Open xDrip4iOS Bluetooth and add a new device. Select M5Stack then your device type and finally Scan. Note: If your device was already connected follow the instructions to reset the password (disconnect, reset and connect). Your device will display the glucose value from xDrip4iOS when xDrip4iOS displays a value, and when within Bluetooth range. You can modify some settings like colors, screen rotation, and eventually turn of the monitor. More features documented in the project repositories https://github.com/JohanDegraeve/M5_NightscoutMon#readme and https://github.com/JohanDegraeve/M5_StickC_xdrip_iOS#readme","title":"Connect to xDrip4iOS"},{"location":"connect/follower/","text":"Connect to Nightscout as a Follower \u2301 In this page, we will go through the method of connecting xDrip4iOS to an existing Nightscout instance. This will allow you to \"follow\" another person (child, loved one or patient) and see their CGM value and graph in real-time. Firstly, make sure you have valid CGM data being sent into the Nightscout site by a working master device/system. Follower Restrictions Please note that when used in Follower Mode, xDrip4iOS cannot connect to any CGM system/sensor. For this reason you will see that the Calibration and Sensor buttons are disabled. In Settings , check that you are set to Follower mode. If not, click the option once to change modes. In order to connect xDrip4iOS to Nightscout as a Follower, in the Settings Menu, select Enable Nightscout . You should enter your Nightscout URL as per the service you want to follow (if you don't know this, the master user will usually be able to give you this information). URL examples (change mynightscout and 12345 as necessary): Heroku/Mongo : https://mynightscout.herokuapp.com ns.10be.de (1) : https://mynightscout.10be.de Port: 12345 T1Pal : https://mynightscout.t1pal.com ( Note: you'll find your public Url in the Social page ) (1) If your URL needs a port number to access the service (such as the default mode of ns.10be.de), then enter this number in Port .","title":"Connect to Nightscout as a Follower"},{"location":"connect/follower/#connect-to-nightscout-as-a-follower","text":"In this page, we will go through the method of connecting xDrip4iOS to an existing Nightscout instance. This will allow you to \"follow\" another person (child, loved one or patient) and see their CGM value and graph in real-time. Firstly, make sure you have valid CGM data being sent into the Nightscout site by a working master device/system. Follower Restrictions Please note that when used in Follower Mode, xDrip4iOS cannot connect to any CGM system/sensor. For this reason you will see that the Calibration and Sensor buttons are disabled. In Settings , check that you are set to Follower mode. If not, click the option once to change modes. In order to connect xDrip4iOS to Nightscout as a Follower, in the Settings Menu, select Enable Nightscout . You should enter your Nightscout URL as per the service you want to follow (if you don't know this, the master user will usually be able to give you this information). URL examples (change mynightscout and 12345 as necessary): Heroku/Mongo : https://mynightscout.herokuapp.com ns.10be.de (1) : https://mynightscout.10be.de Port: 12345 T1Pal : https://mynightscout.t1pal.com ( Note: you'll find your public Url in the Social page ) (1) If your URL needs a port number to access the service (such as the default mode of ns.10be.de), then enter this number in Port .","title":"Connect to Nightscout as a Follower"},{"location":"install/build/","text":"How to Build xDrip4iOS using Xcode \u2301 Although for most users, the recommended method for installing xDrip4iOS is to just use Testflight , many users will want to build directly from source. If so, this page is for you! xDrip4iOS is an open-source project and is released under the GNU General Public License v3.0 . Most users that decide to build from source will be people who are interested in collaborating in the development of the project or users who are used to DIY solutions (such as Loop or FreeAPS), have a valid Apple Developer license/account and are comfortable working with Xcode. Although xDrip4iOS is the common public name for the application, the actual Github project name is xdripswift and you will often so it referred to as this in the following documentation. The main project repository is here Ready? So then let's begin. Here are some of the things that you'll need before you're able to build and install the app: A Mac computer (iMac, MacBook etc). A valid Apple Developer account/license. If not, you could theoretically use a free Apple ID to sign the app with but you will have to remove Healthkit and NFC integration capabilities as well as needing to re-sign the app every 7 days. It's really not worth considering this path if you do not have a current Apple Developer account Xcode installed. This can be done from the App Store on your Mac. Git installed. If you're unsure how to do this, please follow the guide here . A compatible cable to connect your iPhone (Lightning port) to your Mac (USB-C or USB-A as needed) It is recommeneded to always use the latest versions of MacOS and Xcode. Your iPhone should ideally also be using the latest version of iOS. Apple Developer Account \u2301 To be able to build and run xDrip4iOS without restrictions on your personal devices, you will ideally need an Apple Developer Account. This is a paid account (around 100 EUR/USD per year) which gives you full access to Apple development tools and documentation, together with the ability to self-sign your own apps (or submit them to Testflight or App Store if you wanted). More information at the Apple Developer website. Install the Cocoa Pods Framework to your Mac \u2301 If this is the first time that you have built xDrip4iOS on your Mac, then you will need to install a set of frameworks called CocoaPods. If you have previously installed CocoaPods, you can skip this step. APPLE \"M1\" PROCESSOR? In this step, the process will change slightly depending on the type of Mac you are using. You will be using either an Intel-based or M1-based Mac. The newer Mac Mini, MacBook Air or MacBook Pro (2020-2021) will generally have the new M1 processor (aka Apple Silicon ) Most older Macs (<2020) will be running Intel processesors and will not need the following step to be carried out If you are one of these newer M1 Macs, then you must perform the following steps before trying to install the Cocoapods framework. Firslty, make sure you run Terminal using Rosetta (this is an Apple tool that allows you to translate older applications to run on the newer M1 architecture): Right-click on Terminal in Finder Click \"Get Info\" Select \"Open with Rosetta\" Clikc \"OK\" Then, open Terminal and run the following command to install ffi : sudo gem install ffi Once successfully installed, you should now be able to continue as per the Intel instructions below To install the Cocoapods framework to your Mac, please enter the following command: sudo gem install cocoapods Note the use of \" sudo \" here to elevate the permissions to allow installation at a system level. If asked for your password, use the admin password that you use to log into your Mac (this is generally just your user password). You should get an \"OK\" message confirming successfull installation. Clone the xdripswift project \u2301 Good job for getting to here. Now it's time to grab a copy of the source code from Github and build the project. You should open Terminal, navigate into your Documents folder (or wherever you prefer) and run the following command to clone the xDrip4iOS project: git clone --branch=master --recurse-submodules https://github.com/JohanDegraeve/xdripswift This will create a new folder called xdripswift and it will copy all needed code into it. Once completed we should navigate into this folder: cd xdripswift Install Cocoa Pods Dependencies \u2301 Earlier we installed the full Cocoa Pods framework onto your system. Now we will go into the cloned project folder and install the individual project dependencies there: pod install Again, you will see some activity and you should get an OK message. Configure the Override File \u2301 In order to make building as easy as possible, we have adopted the use of XCconfig files. Whilst this may seem unnecessary at first glance, it will make things much easier for future installs. Right click the following link, chose the \" Save Link As... \" or \" Download Linked File As... \" option and save the file to your xdripswift folder: xDripConfigOverride.xcconfig Open this file in TextEdit or Xcode and you will see the following structure. You will need to edit the lines highlighted in blue . MAIN_APP_DISPLAY_NAME = xDrip4iO5 // Put your team id here for signing // XDRIP_DEVELOPMENT_TEAM = // Change to support running multiple apps simultaneously. // MAIN_APP_BUNDLE_IDENTIFIER = com.$(DEVELOPMENT_TEAM).xdripswift You should remove the \"//\" characters to uncomment these lines and in XDRIP_DEVELOPMENT_TEAM add your Development Team Identifier to this line. If you have a paid Developer account, then you will probably already know this identifier. If not, then you can log into the Apple Developer Portal and look at the Membership section](https://developer.apple.com/account/#!/membership). You can find your ID here: Put this ID (your ID, not the example shown below) here: // XDRIP_DEVELOPMENT_TEAM = 95C72J2362 No Apple Development Account? If you don't have a paid Developer account then you can always use something else. Examples: // XDRIP_DEVELOPMENT_TEAM = johnsmith // XDRIP_DEVELOPMENT_TEAM = iloveinsulin If you get an error message that the Bundle Identifier is not available it's because somebody else has already used/registered it. Just choose a different one. It can even be completely random such as \"DI20F77G9S0WLKWOCYVH\". Just make sure you keep a note of it. Finally, just uncomment the MAIN_APP_BUNDLE_IDENTIFIER line. No need to edit anything else. Your file should now look like this: MAIN_APP_DISPLAY_NAME = xDrip4iO5 // Put your team id here for signing XDRIP_DEVELOPMENT_TEAM = 95C77J2362 <--- here you put your unique ID // Change to support running multiple apps simultaneously. MAIN_APP_BUNDLE_IDENTIFIER = com.$(DEVELOPMENT_TEAM).xdripswift Make sure you save/close the file and exit out of the editor/Xcode before continuing. Build the Project \u2301 Now we're going to open the Workspace file. Go back to terminal and run the following command (again, inside your xdripswift folder). xed . Open the xdrip file on the left of the screen and you should see that your Bundle Identifier has been correctly configured with the values you used in the previous step. Now you'll need to \"sign\" the targets in order to allow Xcode to create a provisioning profile to be able to install the app to your iPhone. Go to the Signing & Capabilities tab one and select your Team in the drop down Signing option for each target. Please note that there are four targets to sign: xdrip xDrip4iOS Widget Watch App Watch App Watchkit Extension Repeat this for each target, connect your iPhone to your Mac, select your device at the top of the screen (don't select a simulator!) and hit Build (\"Play\") How do I Update? \u2301 From time to time, we will release updates to the xDrip4iOS application. When this happens, we will always merge the updated code into the master branch in Github and with this code, we will update the original Testflight release. We would always recommend keeping your build up-to-date with the latest release. Apart from new features, we will often include fixes and improvements in every release. You have two options for updating your build: Delete everything and start again. We don't recommend this, but it would work. Just delete the xdripswift folder and follow all instructions again from the top of this page. Use git to pull in the latest code changes (commits) and hit re-build. This is the preffered method and is what we will discuss below Why do we recommend option (2)? It is simple. If you make a mistake in downloading and configuring the freshly cloned code in (1), then your app will install as a completely new app. What you want to do is to overwrite the original app and keep all settings/data. This is why we prefer option (2). So we are starting with your existing xdripswift folder. This has the code you previously cloned and where you had edited xDripConfigOverride and also you had installed the cocoapods dependencies and signed the targets. First we are going to save a copy of these local changes that you have made. Make sure that you have closed Xcode completely, open Terminal and go to the xdripswift folder and run: git stash This will remove your changes and store them to one side whilst we do other things. We need to do this to remove your modifications before merging in the latest changes from the master branch in the main repository. Now we have returned your local copy to be the same as when it was first cloned, we need to pull downstream the changes in master and merge them into your local copy: git pull --force This is a single command to perform a git \"fetch\" followed by a git \"merge\" to pull all latest changes and merge them into your local copy. Now we need to re-apply the previously saved (stashed) changes. We do this by running: git stash pop We should now have the code fully updated and your local changes (signing etc) applied to the \"new\" code. Now we're going to open the Workspace file as before. Go back to Terminal and run the following command (again, inside your xdripswift folder). xed . Now continue with the steps as before in order to build xDrip4iOS. Update Problems? \u2301 Xcode can sometimes make this tricky when it comes to simply describing a series of timestamped text edits to code files (which is the basic idea behind source-code control - in this case we use Github). The main xdrip.xcodeproj and project.pbxproj files can easily get out of sync when big changes are made to the project structure and build settings and this makes it difficult to re-apply your previous changes. The update to 4.8.0 included very big changes with the addition of the Apple Watch app and new build variables/settings aimed to make things easier for newer builders. When this happens, it is possible that you will get a merge error in Terminal. If this happens, you must fix it before trying to open the Workspace file and build. CONFLICT (content): Merge conflict in xdrip.xcodeproj/project.pbxproj If you see the above error, the easiest way is to simply start all over again. If you already built once, then it will take you just a few minutes. Please follow these steps: Using Finder, browse to your xdripswift folder and copy your modified xDripConfigOverride file to the Desktop or wherever you want. Delete your xdripswift folder completely. Go back to the Build instructions and start the whole process again to clone a new/updated copy of the master branch. Run \" install pod \" again from Terminal inside your new xdripswift folder. This time, copy in your previously modified xDripConfigOverride file before simply opening the workspace with \" xed . \" as before. Assuming that you really did follow the build instructions correctly the first time and didn't edit anything else, then you should be able to immediately just build the new version with no problems.","title":"Build from Source"},{"location":"install/build/#how-to-build-xdrip4ios-using-xcode","text":"Although for most users, the recommended method for installing xDrip4iOS is to just use Testflight , many users will want to build directly from source. If so, this page is for you! xDrip4iOS is an open-source project and is released under the GNU General Public License v3.0 . Most users that decide to build from source will be people who are interested in collaborating in the development of the project or users who are used to DIY solutions (such as Loop or FreeAPS), have a valid Apple Developer license/account and are comfortable working with Xcode. Although xDrip4iOS is the common public name for the application, the actual Github project name is xdripswift and you will often so it referred to as this in the following documentation. The main project repository is here Ready? So then let's begin. Here are some of the things that you'll need before you're able to build and install the app: A Mac computer (iMac, MacBook etc). A valid Apple Developer account/license. If not, you could theoretically use a free Apple ID to sign the app with but you will have to remove Healthkit and NFC integration capabilities as well as needing to re-sign the app every 7 days. It's really not worth considering this path if you do not have a current Apple Developer account Xcode installed. This can be done from the App Store on your Mac. Git installed. If you're unsure how to do this, please follow the guide here . A compatible cable to connect your iPhone (Lightning port) to your Mac (USB-C or USB-A as needed) It is recommeneded to always use the latest versions of MacOS and Xcode. Your iPhone should ideally also be using the latest version of iOS.","title":"How to Build xDrip4iOS using Xcode"},{"location":"install/build/#apple-developer-account","text":"To be able to build and run xDrip4iOS without restrictions on your personal devices, you will ideally need an Apple Developer Account. This is a paid account (around 100 EUR/USD per year) which gives you full access to Apple development tools and documentation, together with the ability to self-sign your own apps (or submit them to Testflight or App Store if you wanted). More information at the Apple Developer website.","title":"Apple Developer Account"},{"location":"install/build/#install-the-cocoa-pods-framework-to-your-mac","text":"If this is the first time that you have built xDrip4iOS on your Mac, then you will need to install a set of frameworks called CocoaPods. If you have previously installed CocoaPods, you can skip this step. APPLE \"M1\" PROCESSOR? In this step, the process will change slightly depending on the type of Mac you are using. You will be using either an Intel-based or M1-based Mac. The newer Mac Mini, MacBook Air or MacBook Pro (2020-2021) will generally have the new M1 processor (aka Apple Silicon ) Most older Macs (<2020) will be running Intel processesors and will not need the following step to be carried out If you are one of these newer M1 Macs, then you must perform the following steps before trying to install the Cocoapods framework. Firslty, make sure you run Terminal using Rosetta (this is an Apple tool that allows you to translate older applications to run on the newer M1 architecture): Right-click on Terminal in Finder Click \"Get Info\" Select \"Open with Rosetta\" Clikc \"OK\" Then, open Terminal and run the following command to install ffi : sudo gem install ffi Once successfully installed, you should now be able to continue as per the Intel instructions below To install the Cocoapods framework to your Mac, please enter the following command: sudo gem install cocoapods Note the use of \" sudo \" here to elevate the permissions to allow installation at a system level. If asked for your password, use the admin password that you use to log into your Mac (this is generally just your user password). You should get an \"OK\" message confirming successfull installation.","title":"Install the Cocoa Pods Framework to your Mac"},{"location":"install/build/#clone-the-xdripswift-project","text":"Good job for getting to here. Now it's time to grab a copy of the source code from Github and build the project. You should open Terminal, navigate into your Documents folder (or wherever you prefer) and run the following command to clone the xDrip4iOS project: git clone --branch=master --recurse-submodules https://github.com/JohanDegraeve/xdripswift This will create a new folder called xdripswift and it will copy all needed code into it. Once completed we should navigate into this folder: cd xdripswift","title":"Clone the xdripswift project"},{"location":"install/build/#install-cocoa-pods-dependencies","text":"Earlier we installed the full Cocoa Pods framework onto your system. Now we will go into the cloned project folder and install the individual project dependencies there: pod install Again, you will see some activity and you should get an OK message.","title":"Install Cocoa Pods Dependencies"},{"location":"install/build/#configure-the-override-file","text":"In order to make building as easy as possible, we have adopted the use of XCconfig files. Whilst this may seem unnecessary at first glance, it will make things much easier for future installs. Right click the following link, chose the \" Save Link As... \" or \" Download Linked File As... \" option and save the file to your xdripswift folder: xDripConfigOverride.xcconfig Open this file in TextEdit or Xcode and you will see the following structure. You will need to edit the lines highlighted in blue . MAIN_APP_DISPLAY_NAME = xDrip4iO5 // Put your team id here for signing // XDRIP_DEVELOPMENT_TEAM = // Change to support running multiple apps simultaneously. // MAIN_APP_BUNDLE_IDENTIFIER = com.$(DEVELOPMENT_TEAM).xdripswift You should remove the \"//\" characters to uncomment these lines and in XDRIP_DEVELOPMENT_TEAM add your Development Team Identifier to this line. If you have a paid Developer account, then you will probably already know this identifier. If not, then you can log into the Apple Developer Portal and look at the Membership section](https://developer.apple.com/account/#!/membership). You can find your ID here: Put this ID (your ID, not the example shown below) here: // XDRIP_DEVELOPMENT_TEAM = 95C72J2362 No Apple Development Account? If you don't have a paid Developer account then you can always use something else. Examples: // XDRIP_DEVELOPMENT_TEAM = johnsmith // XDRIP_DEVELOPMENT_TEAM = iloveinsulin If you get an error message that the Bundle Identifier is not available it's because somebody else has already used/registered it. Just choose a different one. It can even be completely random such as \"DI20F77G9S0WLKWOCYVH\". Just make sure you keep a note of it. Finally, just uncomment the MAIN_APP_BUNDLE_IDENTIFIER line. No need to edit anything else. Your file should now look like this: MAIN_APP_DISPLAY_NAME = xDrip4iO5 // Put your team id here for signing XDRIP_DEVELOPMENT_TEAM = 95C77J2362 <--- here you put your unique ID // Change to support running multiple apps simultaneously. MAIN_APP_BUNDLE_IDENTIFIER = com.$(DEVELOPMENT_TEAM).xdripswift Make sure you save/close the file and exit out of the editor/Xcode before continuing.","title":"Configure the Override File"},{"location":"install/build/#build-the-project","text":"Now we're going to open the Workspace file. Go back to terminal and run the following command (again, inside your xdripswift folder). xed . Open the xdrip file on the left of the screen and you should see that your Bundle Identifier has been correctly configured with the values you used in the previous step. Now you'll need to \"sign\" the targets in order to allow Xcode to create a provisioning profile to be able to install the app to your iPhone. Go to the Signing & Capabilities tab one and select your Team in the drop down Signing option for each target. Please note that there are four targets to sign: xdrip xDrip4iOS Widget Watch App Watch App Watchkit Extension Repeat this for each target, connect your iPhone to your Mac, select your device at the top of the screen (don't select a simulator!) and hit Build (\"Play\")","title":"Build the Project"},{"location":"install/build/#how-do-i-update","text":"From time to time, we will release updates to the xDrip4iOS application. When this happens, we will always merge the updated code into the master branch in Github and with this code, we will update the original Testflight release. We would always recommend keeping your build up-to-date with the latest release. Apart from new features, we will often include fixes and improvements in every release. You have two options for updating your build: Delete everything and start again. We don't recommend this, but it would work. Just delete the xdripswift folder and follow all instructions again from the top of this page. Use git to pull in the latest code changes (commits) and hit re-build. This is the preffered method and is what we will discuss below Why do we recommend option (2)? It is simple. If you make a mistake in downloading and configuring the freshly cloned code in (1), then your app will install as a completely new app. What you want to do is to overwrite the original app and keep all settings/data. This is why we prefer option (2). So we are starting with your existing xdripswift folder. This has the code you previously cloned and where you had edited xDripConfigOverride and also you had installed the cocoapods dependencies and signed the targets. First we are going to save a copy of these local changes that you have made. Make sure that you have closed Xcode completely, open Terminal and go to the xdripswift folder and run: git stash This will remove your changes and store them to one side whilst we do other things. We need to do this to remove your modifications before merging in the latest changes from the master branch in the main repository. Now we have returned your local copy to be the same as when it was first cloned, we need to pull downstream the changes in master and merge them into your local copy: git pull --force This is a single command to perform a git \"fetch\" followed by a git \"merge\" to pull all latest changes and merge them into your local copy. Now we need to re-apply the previously saved (stashed) changes. We do this by running: git stash pop We should now have the code fully updated and your local changes (signing etc) applied to the \"new\" code. Now we're going to open the Workspace file as before. Go back to Terminal and run the following command (again, inside your xdripswift folder). xed . Now continue with the steps as before in order to build xDrip4iOS.","title":"How do I Update?"},{"location":"install/build/#update-problems","text":"Xcode can sometimes make this tricky when it comes to simply describing a series of timestamped text edits to code files (which is the basic idea behind source-code control - in this case we use Github). The main xdrip.xcodeproj and project.pbxproj files can easily get out of sync when big changes are made to the project structure and build settings and this makes it difficult to re-apply your previous changes. The update to 4.8.0 included very big changes with the addition of the Apple Watch app and new build variables/settings aimed to make things easier for newer builders. When this happens, it is possible that you will get a merge error in Terminal. If this happens, you must fix it before trying to open the Workspace file and build. CONFLICT (content): Merge conflict in xdrip.xcodeproj/project.pbxproj If you see the above error, the easiest way is to simply start all over again. If you already built once, then it will take you just a few minutes. Please follow these steps: Using Finder, browse to your xdripswift folder and copy your modified xDripConfigOverride file to the Desktop or wherever you want. Delete your xdripswift folder completely. Go back to the Build instructions and start the whole process again to clone a new/updated copy of the master branch. Run \" install pod \" again from Terminal inside your new xdripswift folder. This time, copy in your previously modified xDripConfigOverride file before simply opening the workspace with \" xed . \" as before. Assuming that you really did follow the build instructions correctly the first time and didn't edit anything else, then you should be able to immediately just build the new version with no problems.","title":"Update Problems?"},{"location":"install/personal_testflight/","text":"Open a Personal Testflight \u2301 Introduction \u2301 If you have an Apple Developer account and have built xDrip4iOS for personal use, then you can also take advantage and distribute the app to a smaller number of users via your own personal TestFlight without the need for Apple review/approval. Please note that this is not the same as opening a public Testflight link for external testing with up to 10,000 users. This would need Apple Review approval and could result in your app being suspended as there is already one official Testflight release for xDrip4iOS. xDrip4iOS is a community-based project and opening a personal Testflight test and sharing it with some users from the community is a great thing to do. Plus you'll be helping out people who don't have access to a Mac and an Apple Developer Account. The way you do this is to basically to open a private closed-circle test for a maximum of 100 users, each of which will need to share with you their Apple ID email address so that you can send them the invitation via e-mail. The basic steps are: archive and upload the app to App Store Connect invite another user to become a Customer Support Agent for your apps once that user has accepted the invitation, give that user access to the app they will then be able to install the app from Testflight To do this you will need: knowledge to build xDrip4iOS from source as described here an Apple Developer account empathy and a willingness to help out other people Community Guidelines \u2301 We don't like rules. In the same way as this is a fully open-source project where anybody can do what they like with the code, we would like you to consider the following guidelines to keep paying-forward and help the people in the T1D community. Don't charge anybody for this. That would be bad. xDrip4iOS (and this documentation) is written and maintained completely free-of-charge by developers/collaborators who don't even accept donations for their work. If you're going to do this and help out up to 100 other people, then please commit to keeping your Testflight builds up-to-date every time a new release comes out. It should just take 20 minutes of your time every few weeks but you will be really helping out other people. Remember that your build will expire after 90 days so please read again the last point to ensure it doesn't ;) Please don't upload an initial copy and then close the test or not bother to do anything again. Don't accept people into your test if you're going to get tired and kick them out after one month. Remember that lots of the people you are helping are looking after children with T1D and are counting on your support to be able to keep using the app. Yes, we know... the last three points are basically the same but they're very important . We can resume even further what we would ask you to commit to doing if you chose to follow this path: \"Keep your build as up-to-date as possible and don't charge anybody anything for your help. The end.\" ___ Detailed Steps \u2301 First you need to open the Workspace, configure the basic build settings and sign the targets in Xcode, from now on, we're going to assume you already know how to do that and have already done it. Once it is able to build correctly and without any compiler errors, then we can archive the project (this means converting it into a single file containing all of the required data), upload it to App Store Connect and then configure your users to allow them access to install and use the app. Ready? So let's begin... Archive the Project \u2301 The first thing to do is to set up Xcode for archiving. Unlike building, where we need to select our specific device (or a chosen simulator if we are developing/testing), the archiving process produces a generic file, not tied to any one type of device. To do this, we need to select Any iOS Device (arm64) from the dropdown menu. Next we should go to the top menu and chose Archive The archiving process can take a few minutes. Upload the Archive \u2301 When the build process has completed, the following screen should open up, select Distribute App In the next screen, App Store Connect is selected by default, select Next In the next screen, Upload is selected by default, select Next In the next screen, you should give your app a \"new\" name for Testflight. Please keep the name exactly as it is and just add \" _ \" followed by your initials. Again, please do not modify the actual app name, format or case. Just add your initials to the end. For example. If your name was James Hetfield, your app name should be xDrip4iOS_JH If you name was Paul McCartney, your app name should be xDrip4iOS_PC Now, set the primary language to English and click Next (note: you will have your own unique SKU - don't change it! ) If you still get an error because there is another xDrip4iOS_JH, then just put _JH1. In the next screen, click Next In the next screen, click Next (this example screenshot is for another app) In the next screen, click Upload (this example screenshot is for another app) Wait until uploading is finished (this example screenshot is for another app) You should see this screen when uploading is finished (this example screenshot is for another app) Adding Users \u2301 Now we have successfully uploaded the archive file to App Store Connect. You'll need to wait for a short time whilst the file is processed. You'll get an e-mail when processing is completed (it usually takes around 10 minutes). Log into App Store Connect Select Users and Access We must select the type of role that we want to assign to the new user. It isn't too important as our only aim is to give them access to test the app. As an example we will select Customer Support as the user type that we're going to add. Please note that there is a limit (around 50) to how many users we can add with each role type. As an example, we would add the first 40 users as Customer Service , 40 more as Marketing , then the last 20 as Finance etc. Click the \" + \" symbol to add a new user Fill in the First name, Last name and email address (this must be their Apple ID) of the new tester you want to add and click Invite . Ask the User to Accept The Invitation \u2301 The recipient (in this example, recipientemailaddress@domain.com ), will receive an invitation email from Apple. Ask him or her to check his or her email and to accept the invite. This will open App Store Connect web page (not the app) in a browser window for them. They should confirm that they agree to test your app. Add User to your App \u2301 Now go back to App Store Connect , and select My Apps Make sure the app xDrip4iOS is selected and click on the TestFlight tab at the top of the page. Click Internal Testing -> App Store Connect Users Click + to add a tester Select the newly added tester from the previous step and you're all done Do NOT add External Testers In the Testflight tab of App Store Connect you will see two ways to add testers: App Store Connect Users External Testers You must only use App Store Connect Users to privately add your users (max 100 users). Do not add any External Testers . This is what you would need to do for a 10,000 user public test and will submit a review of your app by the Apple Review board. Install from Testflight \u2301 The new tester should now install the TestFlight app if they don't already have it (it's available in the regular App Store) on their device and sign in with their Apple ID. When they open the TestFlight app, they should be able to see your release of xDrip4iOS and install it on their device. Please note that it might take 10-15 minutes for the app to appear in their Testflight. Ask them to be patient . How do I Update my Release? \u2301 Whenever there is an update available to the main branch, please update your local repository and follow these instructions again to archive and upload your release. Your tester(s) should be informed by a notifiation that a new version is available and it will prompt them to update the app The process to update a Testflight build is very simple and consists of two operations: Update your local code following the update instructions on the build page . Upload your updated build to Testflight following the instructions above. That's it. It really is that simple. Once you do this, as you have kept all previous signing and build settings, the new build will automatically be offered to your personal Testflight users and will directly replace the old app (keeping all settings and data) when they update. If you do not follow the update instructions and try to manually \"hack\" things to make them work, you could end up creating a duplicate app.","title":"How Do I Release?"},{"location":"install/personal_testflight/#open-a-personal-testflight","text":"","title":"Open a Personal Testflight"},{"location":"install/personal_testflight/#introduction","text":"If you have an Apple Developer account and have built xDrip4iOS for personal use, then you can also take advantage and distribute the app to a smaller number of users via your own personal TestFlight without the need for Apple review/approval. Please note that this is not the same as opening a public Testflight link for external testing with up to 10,000 users. This would need Apple Review approval and could result in your app being suspended as there is already one official Testflight release for xDrip4iOS. xDrip4iOS is a community-based project and opening a personal Testflight test and sharing it with some users from the community is a great thing to do. Plus you'll be helping out people who don't have access to a Mac and an Apple Developer Account. The way you do this is to basically to open a private closed-circle test for a maximum of 100 users, each of which will need to share with you their Apple ID email address so that you can send them the invitation via e-mail. The basic steps are: archive and upload the app to App Store Connect invite another user to become a Customer Support Agent for your apps once that user has accepted the invitation, give that user access to the app they will then be able to install the app from Testflight To do this you will need: knowledge to build xDrip4iOS from source as described here an Apple Developer account empathy and a willingness to help out other people","title":"Introduction"},{"location":"install/personal_testflight/#community-guidelines","text":"We don't like rules. In the same way as this is a fully open-source project where anybody can do what they like with the code, we would like you to consider the following guidelines to keep paying-forward and help the people in the T1D community. Don't charge anybody for this. That would be bad. xDrip4iOS (and this documentation) is written and maintained completely free-of-charge by developers/collaborators who don't even accept donations for their work. If you're going to do this and help out up to 100 other people, then please commit to keeping your Testflight builds up-to-date every time a new release comes out. It should just take 20 minutes of your time every few weeks but you will be really helping out other people. Remember that your build will expire after 90 days so please read again the last point to ensure it doesn't ;) Please don't upload an initial copy and then close the test or not bother to do anything again. Don't accept people into your test if you're going to get tired and kick them out after one month. Remember that lots of the people you are helping are looking after children with T1D and are counting on your support to be able to keep using the app. Yes, we know... the last three points are basically the same but they're very important . We can resume even further what we would ask you to commit to doing if you chose to follow this path: \"Keep your build as up-to-date as possible and don't charge anybody anything for your help. The end.\" ___","title":"Community Guidelines"},{"location":"install/personal_testflight/#detailed-steps","text":"First you need to open the Workspace, configure the basic build settings and sign the targets in Xcode, from now on, we're going to assume you already know how to do that and have already done it. Once it is able to build correctly and without any compiler errors, then we can archive the project (this means converting it into a single file containing all of the required data), upload it to App Store Connect and then configure your users to allow them access to install and use the app. Ready? So let's begin...","title":"Detailed Steps"},{"location":"install/personal_testflight/#archive-the-project","text":"The first thing to do is to set up Xcode for archiving. Unlike building, where we need to select our specific device (or a chosen simulator if we are developing/testing), the archiving process produces a generic file, not tied to any one type of device. To do this, we need to select Any iOS Device (arm64) from the dropdown menu. Next we should go to the top menu and chose Archive The archiving process can take a few minutes.","title":"Archive the Project"},{"location":"install/personal_testflight/#upload-the-archive","text":"When the build process has completed, the following screen should open up, select Distribute App In the next screen, App Store Connect is selected by default, select Next In the next screen, Upload is selected by default, select Next In the next screen, you should give your app a \"new\" name for Testflight. Please keep the name exactly as it is and just add \" _ \" followed by your initials. Again, please do not modify the actual app name, format or case. Just add your initials to the end. For example. If your name was James Hetfield, your app name should be xDrip4iOS_JH If you name was Paul McCartney, your app name should be xDrip4iOS_PC Now, set the primary language to English and click Next (note: you will have your own unique SKU - don't change it! ) If you still get an error because there is another xDrip4iOS_JH, then just put _JH1. In the next screen, click Next In the next screen, click Next (this example screenshot is for another app) In the next screen, click Upload (this example screenshot is for another app) Wait until uploading is finished (this example screenshot is for another app) You should see this screen when uploading is finished (this example screenshot is for another app)","title":"Upload the Archive"},{"location":"install/personal_testflight/#adding-users","text":"Now we have successfully uploaded the archive file to App Store Connect. You'll need to wait for a short time whilst the file is processed. You'll get an e-mail when processing is completed (it usually takes around 10 minutes). Log into App Store Connect Select Users and Access We must select the type of role that we want to assign to the new user. It isn't too important as our only aim is to give them access to test the app. As an example we will select Customer Support as the user type that we're going to add. Please note that there is a limit (around 50) to how many users we can add with each role type. As an example, we would add the first 40 users as Customer Service , 40 more as Marketing , then the last 20 as Finance etc. Click the \" + \" symbol to add a new user Fill in the First name, Last name and email address (this must be their Apple ID) of the new tester you want to add and click Invite .","title":"Adding Users"},{"location":"install/personal_testflight/#ask-the-user-to-accept-the-invitation","text":"The recipient (in this example, recipientemailaddress@domain.com ), will receive an invitation email from Apple. Ask him or her to check his or her email and to accept the invite. This will open App Store Connect web page (not the app) in a browser window for them. They should confirm that they agree to test your app.","title":"Ask the User to Accept The Invitation"},{"location":"install/personal_testflight/#add-user-to-your-app","text":"Now go back to App Store Connect , and select My Apps Make sure the app xDrip4iOS is selected and click on the TestFlight tab at the top of the page. Click Internal Testing -> App Store Connect Users Click + to add a tester Select the newly added tester from the previous step and you're all done Do NOT add External Testers In the Testflight tab of App Store Connect you will see two ways to add testers: App Store Connect Users External Testers You must only use App Store Connect Users to privately add your users (max 100 users). Do not add any External Testers . This is what you would need to do for a 10,000 user public test and will submit a review of your app by the Apple Review board.","title":"Add User to your App"},{"location":"install/personal_testflight/#install-from-testflight","text":"The new tester should now install the TestFlight app if they don't already have it (it's available in the regular App Store) on their device and sign in with their Apple ID. When they open the TestFlight app, they should be able to see your release of xDrip4iOS and install it on their device. Please note that it might take 10-15 minutes for the app to appear in their Testflight. Ask them to be patient .","title":"Install from Testflight"},{"location":"install/personal_testflight/#how-do-i-update-my-release","text":"Whenever there is an update available to the main branch, please update your local repository and follow these instructions again to archive and upload your release. Your tester(s) should be informed by a notifiation that a new version is available and it will prompt them to update the app The process to update a Testflight build is very simple and consists of two operations: Update your local code following the update instructions on the build page . Upload your updated build to Testflight following the instructions above. That's it. It really is that simple. Once you do this, as you have kept all previous signing and build settings, the new build will automatically be offered to your personal Testflight users and will directly replace the old app (keeping all settings and data) when they update. If you do not follow the update instructions and try to manually \"hack\" things to make them work, you could end up creating a duplicate app.","title":"How do I Update my Release?"},{"location":"install/testflight/","text":"Install from Testflight \u2301 Testflight is Apple's platform that allows developers to distribute test versions (often known as Beta versions) of their apps. It is generally much easier for developers to publish for testing compared to releasing them in the main App Store. There are less restrictions and it is also easier for developers to release several versions in quick succession in order to work out bugs and issues. There are two main ways to get xDrip4iOS on your iPhone: Install from Testflight Build and install from source code. The first option is easy for everybody. The second option is more complex and needs a Mac and some knowledge/experience, but it allows you to modify the code and install custom versions as required. Anybody who is using xDrip4iOS for looping will always need to build from source. Please note that the current public Testflight accounts are full.. The only way to install xDrip4iOS is to either build it from source or to check the Facebook group for any available invitations on personal Testflights. Please join the group, read the rules and check for an open slot. Do not post asking for invitations or you will be removed from the group.","title":"Install from Testflight"},{"location":"install/testflight/#install-from-testflight","text":"Testflight is Apple's platform that allows developers to distribute test versions (often known as Beta versions) of their apps. It is generally much easier for developers to publish for testing compared to releasing them in the main App Store. There are less restrictions and it is also easier for developers to release several versions in quick succession in order to work out bugs and issues. There are two main ways to get xDrip4iOS on your iPhone: Install from Testflight Build and install from source code. The first option is easy for everybody. The second option is more complex and needs a Mac and some knowledge/experience, but it allows you to modify the code and install custom versions as required. Anybody who is using xDrip4iOS for looping will always need to build from source. Please note that the current public Testflight accounts are full.. The only way to install xDrip4iOS is to either build it from source or to check the Facebook group for any available invitations on personal Testflights. Please join the group, read the rules and check for an open slot. Do not post asking for invitations or you will be removed from the group.","title":"Install from Testflight"},{"location":"troubleshoot/","text":"xDrip4iOS blank page \u2301","title":"Troubleshooting"},{"location":"troubleshoot/#xdrip4ios-blank-page","text":"","title":"xDrip4iOS blank page"},{"location":"troubleshoot/connection_problems/","text":"xDrip4iOS blank page \u2301","title":"xDrip4iOS blank page"},{"location":"troubleshoot/connection_problems/#xdrip4ios-blank-page","text":"","title":"xDrip4iOS blank page"},{"location":"troubleshoot/disconnections/","text":"xDrip4iOS blank page \u2301","title":"Disconnections?"},{"location":"troubleshoot/disconnections/#xdrip4ios-blank-page","text":"","title":"xDrip4iOS blank page"},{"location":"troubleshoot/reporting_issues/","text":"xDrip4iOS blank page \u2301","title":"xDrip4iOS blank page"},{"location":"troubleshoot/reporting_issues/#xdrip4ios-blank-page","text":"","title":"xDrip4iOS blank page"}]}